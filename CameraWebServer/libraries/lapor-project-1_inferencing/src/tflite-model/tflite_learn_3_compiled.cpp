/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.10.2024 17:26:13

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 16265, -22730, -26771, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00031193785252980888, 0.00023531667829956859, 0.00022829674708191305, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 67,52,117,-89,-68,0,5,18,-10,60,21,8,-16,-65,40,41,-45,40,93,115,-39,-40,43,-68,-127,37,-40,8,126,17,-17,62, 
  /* [1][0][][] */ 56,-49,-73,11,-13,127,-21,-9,116,-50,-13,-99,-65,106,29,-58,91,-47,-11,-107,-117,7,108,62,21,17,-1,-13,-89,-55,4,-61, 
  /* [2][0][][] */ -28,78,-92,81,84,-41,-37,117,93,30,127,-53,-101,-97,87,118,-86,-60,-11,-122,74,116,-53,-94,110,-65,-20,-122,-47,-81,94,-26, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0043270648457109928, 0.003264209721237421, 0.0031668322626501322, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -252, 304, 446, -171, -160, -21, 226, -77, -188, 303, -90, 1077, -197, 38, 0, -259, -67, -126, 1191, 227, -56, -296, -124, -314, 127, -91, -549, -280, 1360, 107, 223, 156, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1140894609270617e-05, 4.306073606130667e-05, 4.3995227315463126e-05, 4.5342905650613829e-05, 4.2716354073490947e-05, 4.6451084926957265e-05, 4.4428674300434068e-05, 4.3977892346447334e-05, 4.2059677070938051e-05, 4.8376987251685932e-05, 4.1326817154185846e-05, 6.3937812228687108e-05, 4.259466368239373e-05, 4.1770137613639235e-05, 4.2432107875356451e-05, 4.3518426537048072e-05, 4.2700299673015252e-05, 4.4448166590882465e-05, 6.2948907725512981e-05, 4.4781303586205468e-05, 4.0921157051343471e-05, 4.0299320971826091e-05, 4.2333820601925254e-05, 4.2523919546511024e-05, 4.6870343794580549e-05, 4.2757168557727709e-05, 4.3046828068327159e-05, 4.0515020373277366e-05, 5.779699858976528e-05, 4.1607036109780893e-05, 4.5346292608883232e-05, 5.4615840781480074e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -50,-60,101,4,97,-19,-98,-109,58,-104,-121,0,58,3,-45,48,-64,-42,-68,-60,-76,-115,-3,108,-127,7,73,-56,113,-6,-28,-95,79,-77,-101,60,-122,-90,-94,21,72,-93,-112,99,44,-121,108,-23,13,-63,-37,97,-80,-68,-104,109,21,59,119,-123,-83,83,-58,39,-6,8,67,90,54,91,82,-120,98,-114,34,81,-117,6,-70,25,50,14,96,-14,-69,-51,-98,100,28,114,-18,-127,12,71,24,10, 
  /* [1][0][][] */ -75,39,-63,0,-32,84,44,11,75,-95,-98,113,49,-17,31,71,116,-36,40,127,-55,1,43,36,40,20,-31,114,17,17,100,-53,61,105,-17,32,58,56,-6,-59,-64,6,-13,-89,-30,43,-43,-51,-23,-70,99,63,20,78,-67,-55,42,88,67,87,-61,121,-58,-68,-57,43,83,44,106,40,20,1,-108,93,-42,54,93,-39,-35,73,-74,89,-60,-108,33,125,-66,-56,76,88,101,37,82,92,21,12, 
  /* [2][0][][] */ 36,38,-48,103,-23,-54,95,96,-93,88,-31,126,70,-14,86,-99,-40,-24,22,43,-94,0,127,31,-21,70,109,22,-60,71,84,85,-75,-19,-72,-107,-66,92,105,-25,-113,-71,15,2,-84,112,-29,-71,103,37,76,-88,-43,60,19,10,-67,102,-60,17,-24,82,-46,48,85,45,64,80,-100,62,52,-74,46,-81,28,43,-59,-2,12,19,37,-100,-11,-47,5,-94,-9,-37,89,111,-28,-3,-52,-75,-51,-72, 
  /* [3][0][][] */ 59,3,36,-33,-67,63,-110,26,41,20,59,1,87,98,69,5,100,99,-47,31,102,-88,-64,-112,-24,-101,-76,103,45,-68,73,24,-46,-32,-27,-10,-86,-27,34,45,-27,-96,-97,0,70,26,-51,-85,65,-56,35,0,100,31,91,-91,-91,-127,-110,-52,-81,32,-17,85,62,-29,-62,-34,-18,-63,-7,86,16,-95,68,-46,47,92,90,-63,-83,-105,21,93,26,48,-49,-97,-83,46,12,-81,100,-100,-88,55, 
  /* [4][0][][] */ 37,108,2,32,-16,-7,27,4,45,90,-9,57,20,-29,-14,-64,-24,0,-46,41,96,-99,84,22,-15,5,67,-50,-39,76,-75,-31,78,115,-10,-93,-44,-14,-116,51,-57,-72,-77,-89,35,111,24,50,24,-16,-16,-70,-62,48,-77,22,55,-112,27,19,21,-76,-13,-45,-41,61,-5,-37,39,-91,-117,-100,-55,31,115,58,89,-23,-7,-65,13,-30,-119,-4,2,78,83,22,-127,-68,62,77,45,80,-94,0, 
  /* [5][0][][] */ 94,-85,66,75,30,-127,25,57,100,-107,-1,-58,39,92,34,26,50,55,-69,95,34,46,8,-25,-101,-52,-16,-99,42,17,17,-90,-45,1,-62,15,-123,-30,46,21,-79,-44,38,90,-26,25,36,-44,-100,81,30,31,19,14,37,-13,71,36,-50,-53,34,-83,35,-75,-25,95,-29,29,74,-2,80,-59,-52,77,-40,-80,6,-59,11,67,101,42,32,103,-74,75,-7,38,68,-91,89,82,-11,27,69,-84, 
  /* [6][0][][] */ 9,-36,116,82,-78,-66,6,63,-11,-71,10,-77,56,58,116,-102,50,11,-1,91,-76,-104,120,62,-53,-81,-1,-45,-20,-114,52,-81,-84,-110,-32,-98,5,38,-106,82,84,60,27,-11,-109,101,-90,-39,-72,18,-33,-67,59,-47,87,-31,-2,9,-66,127,-98,16,59,-67,-51,64,109,-44,74,-3,-88,-7,68,-68,-81,-27,-80,-82,-47,-9,34,-22,38,-31,-63,-81,-20,-96,82,93,94,11,-52,-63,70,-22, 
  /* [7][0][][] */ 81,69,-34,-53,-62,115,-22,-4,102,6,-96,16,25,-83,45,73,50,17,6,125,35,30,-8,82,-64,106,41,59,-73,120,-26,47,26,23,49,101,-103,80,-6,-26,88,-81,84,68,52,-1,82,-113,50,-42,-127,-67,-16,79,23,30,122,-112,8,-57,14,-9,89,-97,-65,-52,62,24,-101,27,49,61,79,31,62,60,-51,51,-98,37,92,-28,-37,-64,85,36,-115,101,68,8,93,78,-49,-55,-6,-52, 
  /* [8][0][][] */ 15,33,-48,-99,66,23,-80,-21,4,37,45,100,24,-43,-87,-78,-78,95,-52,29,33,-33,73,109,-119,104,46,74,-68,32,-95,127,92,-35,38,-2,112,5,-16,74,83,105,-112,-122,-6,-25,-21,111,16,-86,-55,1,-61,-10,-25,-101,41,94,-93,97,123,30,54,120,-28,-44,-31,105,-79,55,8,1,67,79,5,16,-39,96,83,61,40,90,-110,-81,26,45,68,-36,39,-38,-82,111,-74,-106,-45,65, 
  /* [9][0][][] */ -3,13,106,45,84,-88,-37,-105,39,45,-4,53,-10,-61,-87,-20,29,7,-86,-72,14,98,-81,-83,104,-11,-2,29,13,-60,-77,83,55,3,21,-12,-62,14,-31,-34,45,-55,57,-76,73,20,-93,55,44,22,-78,-54,84,-67,-61,91,95,-37,4,8,-77,110,80,-61,-69,7,104,48,-40,100,127,-66,28,64,-103,-77,-67,-87,-30,102,31,21,108,24,-38,-74,46,-16,100,35,-15,83,97,-5,58,-16, 
  /* [10][0][][] */ -98,87,98,-82,-10,111,108,25,28,33,24,-70,67,88,-37,12,-39,84,-95,-52,-35,25,56,-75,36,62,-121,-114,-48,97,-106,-73,90,102,107,78,-43,1,-31,37,-42,115,-116,-39,-99,-59,-18,-66,-5,15,17,11,73,17,-60,-35,-96,-39,36,-49,4,79,127,56,123,-77,-106,-23,27,-16,-115,-86,86,74,-83,114,-5,63,68,15,83,6,39,115,-106,74,96,-17,27,11,3,-58,-50,-79,-51,-57, 
  /* [11][0][][] */ 72,42,7,74,98,55,51,19,76,100,-42,87,1,-36,35,-24,5,-51,50,-3,34,72,57,-56,-54,-81,-7,68,83,-14,24,-36,-42,-39,48,59,5,52,-19,-37,-10,79,-46,31,-28,-36,-59,-41,84,89,86,29,-47,-59,1,3,-9,-13,28,-19,-53,127,56,4,39,62,-10,21,49,41,-17,-42,69,58,-22,63,-54,70,-17,82,-74,7,-25,-43,40,-35,34,-29,-52,9,31,-102,-54,-35,-28,-24, 
  /* [12][0][][] */ 14,61,-65,2,81,7,-41,28,-79,56,-20,4,-59,5,41,-81,-103,-38,-64,-94,22,-13,16,94,-73,-60,93,-115,85,1,-40,110,-92,-75,-45,7,-7,-81,-26,35,112,36,-119,-45,-31,-91,-43,112,-50,-127,-87,101,26,-2,-92,76,-13,-42,47,66,48,117,-15,39,108,27,-49,110,48,94,70,70,90,104,-16,-14,-46,35,-124,-90,-66,93,40,8,-43,26,55,108,-100,-117,81,36,92,-11,21,66, 
  /* [13][0][][] */ 124,-59,102,99,90,100,86,73,82,-107,16,-17,115,77,73,-51,-123,-70,-71,38,79,-27,116,-46,-70,52,9,9,-89,-100,92,42,38,109,-16,41,-96,-23,26,77,-59,86,-51,15,-36,36,6,-23,39,94,-25,-103,-118,33,110,-72,-73,25,-23,-84,-20,107,-74,9,-49,-60,-97,98,-29,-13,87,8,-97,48,-89,-52,-110,58,87,-69,61,-92,108,28,-79,-99,99,127,-2,-51,-89,57,127,-49,77,-13, 
  /* [14][0][][] */ -63,-100,89,60,64,-22,-15,-116,-89,-34,70,78,-39,-85,-90,-88,-49,-63,12,33,-40,34,-2,66,-127,-65,-30,27,-110,-111,-83,42,98,-32,-34,-1,99,123,39,-118,0,-114,39,95,69,-116,69,-84,110,53,70,60,94,-32,-7,21,-56,-2,52,92,-27,-78,-25,61,-96,-7,79,-116,-84,-89,-85,94,8,81,53,-78,55,-109,54,21,46,-29,-115,-43,-119,-89,-118,115,117,8,90,-50,82,108,-14,67, 
  /* [15][0][][] */ 13,-25,-23,68,94,-89,54,-104,49,-1,-75,-5,89,3,-92,-109,87,10,-88,20,37,16,71,101,80,63,37,97,18,54,57,-101,11,8,-72,-7,-65,106,106,-70,9,101,-47,-30,21,-82,-47,-89,-9,-73,-13,24,-93,-98,-52,-11,81,45,-46,113,-48,-66,3,120,-36,89,-72,4,-55,13,55,-82,18,-16,69,-102,-1,57,99,79,-89,58,-116,-66,-127,-37,-97,33,74,65,-103,-40,51,106,-108,126, 
  /* [16][0][][] */ -57,0,95,-59,35,105,-52,49,57,46,-104,79,10,-46,-49,-69,101,81,69,72,122,80,-45,54,-39,66,-67,55,-108,-1,48,15,-109,80,65,59,-44,62,-52,-65,30,-38,75,91,72,110,112,-5,-54,-127,19,117,-52,119,72,58,6,89,67,3,125,100,33,51,61,18,-39,100,49,96,-38,2,25,102,53,78,-19,88,-107,-18,20,-78,70,18,16,102,106,14,88,15,-22,110,80,-24,-75,15, 
  /* [17][0][][] */ 35,-111,34,94,-43,-103,-68,-87,44,-87,79,41,86,56,-115,50,25,47,104,100,-97,-10,17,-53,24,61,-78,22,95,-71,-29,68,-29,-23,28,-2,-52,94,-84,-32,-96,-42,-12,-12,0,8,80,-112,78,103,-27,20,-16,75,87,-78,-103,89,-85,-105,26,-96,60,103,-91,-77,45,-101,-114,5,127,25,15,-122,-71,67,98,-42,36,-36,2,-23,-83,-93,-114,64,81,-40,12,71,-111,-121,-18,94,3,38, 
  /* [18][0][][] */ -91,77,113,2,33,-69,-36,0,6,80,-56,-23,-38,33,79,-29,41,-10,32,-18,65,10,42,-20,42,-67,12,103,30,-10,-2,9,-3,-22,-40,-86,-8,18,-8,62,-38,14,-16,9,-56,3,-25,13,1,-33,42,-6,-78,-32,19,69,-37,3,16,-90,50,127,1,14,-70,-83,25,77,17,-47,-39,77,-82,-20,-72,-43,29,71,22,-59,-33,-15,-17,-63,78,-15,39,22,-73,-61,-28,48,48,-60,13,-16, 
  /* [19][0][][] */ 28,41,74,47,58,-74,94,97,89,-28,33,-19,-110,37,-52,68,82,-96,105,43,-19,86,-30,18,74,-86,32,-64,-85,-111,-47,43,101,-68,36,10,22,-61,-46,-93,48,-106,-75,22,-90,31,78,-89,-8,43,-47,49,-32,25,-2,-19,29,114,32,-8,54,-13,98,69,-64,0,-14,-1,-6,56,98,-47,-40,-127,-50,-69,-26,-81,15,127,53,-116,-28,77,-78,-3,24,-5,86,30,-17,58,-32,123,67,-27, 
  /* [20][0][][] */ -14,78,82,98,-82,117,19,57,10,16,-91,-3,-23,91,43,-70,-45,-36,-61,-30,18,-46,-73,-73,88,-79,-105,65,33,35,-44,120,123,49,-18,65,58,-35,-20,-113,-89,-40,-93,-106,-31,-69,-75,107,68,-100,-114,41,69,120,56,-4,127,79,106,107,112,-44,-61,-10,-29,-70,-51,14,-74,-74,-68,75,-62,-90,50,32,124,91,114,123,89,3,80,-26,62,121,-18,77,16,102,48,74,19,32,-7,22, 
  /* [21][0][][] */ 77,78,74,-127,108,-76,70,5,-18,-75,-84,47,1,39,-62,-100,-117,-36,36,18,96,-63,67,-98,59,-84,-37,80,16,39,-20,1,6,14,-116,-122,113,89,-127,-37,-22,-7,24,-22,-106,-92,-105,88,-30,-53,-13,83,46,63,-98,26,-46,32,-54,123,68,-90,32,-1,79,30,-49,-74,-107,-1,43,60,26,-14,76,69,-104,-40,61,103,14,113,14,-71,21,-101,56,-77,-127,82,123,-85,-41,-100,59,-23, 
  /* [22][0][][] */ 33,-61,-77,-107,92,-60,111,53,-104,89,-78,-105,114,-113,-116,-95,35,82,-127,-58,89,-78,27,31,90,-2,-117,93,-56,-83,-71,-114,51,56,19,4,-2,-17,-66,-119,0,-12,-4,94,56,-121,92,-21,-60,-83,4,-19,-75,-102,-47,38,-38,-45,-18,-39,114,-78,-78,-123,-69,17,-118,-50,113,97,-38,1,-75,11,64,-103,41,-60,64,80,106,-97,-78,-123,78,85,93,-36,-59,30,-77,58,22,14,-38,92, 
  /* [23][0][][] */ 57,-96,-3,49,90,-124,-5,-114,48,-88,76,67,3,-118,10,-49,80,-43,-115,92,81,-92,96,-45,-22,-22,74,13,62,38,64,-44,-46,35,7,27,90,-15,-121,-5,-116,-10,-1,-119,-79,-101,108,17,72,-121,-101,-61,74,-68,-63,85,-90,-29,93,38,-123,-101,-64,-20,29,28,-127,-122,55,-26,105,-82,-16,-41,-45,-104,35,-30,85,113,-63,-61,16,-114,86,-2,105,-31,-102,33,98,-15,97,-56,-44,74, 
  /* [24][0][][] */ -56,-26,-88,-82,-74,-77,-62,-79,46,97,84,45,113,71,-37,-98,-68,57,44,-3,84,-81,-45,-46,52,3,76,68,109,118,-3,-26,27,27,40,50,-30,-79,41,-1,-77,-98,88,5,27,-24,55,63,-65,-16,4,12,93,74,70,-58,16,68,21,27,108,-14,82,121,-89,95,-47,-58,-65,51,-89,-30,-24,60,127,109,96,-62,-85,-76,-55,-60,-73,-75,12,84,-10,-53,23,-85,34,-9,14,-3,-79,38, 
  /* [25][0][][] */ -90,-57,-81,-5,91,-76,-98,47,43,-112,-42,18,75,-4,-111,-29,-78,59,31,-121,66,93,-12,-57,11,-68,-108,37,71,-103,27,105,84,-120,78,62,94,-71,-29,-23,-82,100,-109,-7,92,31,73,35,-111,73,-74,-4,43,-31,-70,-17,-18,66,-50,69,115,80,39,31,-8,68,-10,-14,-102,-9,-25,-98,35,-127,77,19,66,73,14,13,39,45,-51,70,-86,-60,-105,-105,-25,-57,113,12,-125,40,-32,-66, 
  /* [26][0][][] */ 104,-127,-35,-30,-106,-15,-20,-16,-107,-127,102,72,-57,-56,2,-20,103,24,-92,-58,24,62,87,5,42,72,2,30,3,3,-91,0,-41,-62,-109,-107,-76,93,-57,104,-96,97,54,25,-77,74,-12,97,-32,18,42,101,-7,-32,-7,-89,73,91,49,16,9,-102,63,-35,110,-24,-68,58,-85,81,71,103,73,-92,-93,-8,40,-121,-105,-9,-32,72,79,-70,73,-8,-43,15,-79,109,-5,26,-49,85,63,87, 
  /* [27][0][][] */ 8,7,-71,-110,-127,-79,-78,-21,42,102,35,-115,-32,55,82,-33,65,-23,87,-94,-103,7,-34,-29,-112,44,-120,-7,66,26,-38,-15,62,68,-98,-91,-97,-73,-122,89,-104,14,23,15,100,22,68,105,93,70,58,-83,-102,-95,-12,-41,105,-26,-118,-86,-65,-67,-41,47,39,-53,-123,106,48,4,-122,3,63,-60,-16,-95,45,-73,88,118,86,-32,119,-64,-82,-91,-36,29,-55,-8,-41,-58,55,17,89,52, 
  /* [28][0][][] */ 62,32,87,46,-40,1,-50,-39,-23,-10,59,95,-70,-47,20,107,127,91,-12,18,-18,48,-26,-27,-60,45,-51,-16,-6,-58,13,-18,-81,17,87,78,99,-79,17,28,85,46,-60,84,-86,-1,8,57,40,-11,-62,-13,1,16,25,7,83,11,122,91,-16,64,-78,-5,41,66,26,59,-72,24,-18,-23,84,10,9,-25,-89,21,-46,50,-53,-54,75,-24,63,-55,75,-63,-75,-41,-33,-57,-38,40,-76,-47, 
  /* [29][0][][] */ 51,58,60,-45,-91,11,-117,9,105,-12,-90,-98,87,-107,-47,-43,-94,108,20,-78,-77,-26,67,9,-34,1,-44,-25,-103,-21,111,-11,55,5,-72,-55,-4,105,-11,97,51,112,-44,87,-2,106,-55,-23,24,-11,52,-99,70,-100,110,42,-97,78,-51,120,-126,112,-107,-64,-64,-67,65,89,93,-89,60,-73,127,73,67,32,109,-51,-28,50,-8,-89,-9,-86,67,118,56,74,-37,99,72,73,-111,21,-3,59, 
  /* [30][0][][] */ 31,-56,-52,34,-127,22,-54,-14,92,-13,4,-86,-84,23,62,-17,1,39,65,-93,38,-88,-100,18,-103,28,-67,113,-11,-116,-82,6,-89,-62,-119,-49,20,-10,-3,27,89,-68,-4,99,105,-38,102,62,-72,72,18,-96,71,-49,-5,102,-101,-70,-88,-48,-97,3,-64,-25,-98,-79,-83,84,-53,111,40,-27,-97,107,44,-76,-64,-61,-66,-56,30,33,-99,-26,-96,34,-101,99,-37,-105,79,43,-27,1,6,-59, 
  /* [31][0][][] */ 79,-63,30,99,37,64,-45,-64,-26,-4,-59,-44,91,-96,-37,89,-33,-73,64,34,81,35,-10,94,30,-95,31,40,-51,-54,46,86,17,21,-21,4,85,-20,-43,-88,53,-52,-28,37,-4,-42,-24,22,64,24,88,-16,-94,-33,-65,16,-71,92,101,96,-15,20,77,-53,65,89,-28,-58,56,-105,8,14,-62,-40,6,11,-46,-19,40,75,-60,-37,70,59,47,79,-66,13,45,-42,-82,-40,10,127,2,3, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017484879354014993, 0.0018300812225788832, 0.0018697971245273948, 0.0019270734628662467, 0.0018154450226575136, 0.0019741710275411606, 0.0018882185686379671, 0.0018690604483708739, 0.0017875363118946552, 0.0020560219418257475, 0.0017563897417858243, 0.0027173568960279226, 0.0018102731555700302, 0.0017752308631315827, 0.0018033646047115326, 0.0018495330587029457, 0.001814762712456286, 0.0018890469800680876, 0.002675328403711319, 0.0019032054115086794, 0.0017391490982845426, 0.001712721074000001, 0.0017991872737184167, 0.001807266497053206, 0.0019919895566999912, 0.0018171796109527349, 0.0018294901819899678, 0.0017218883149325848, 0.0024563723709434271, 0.0017682990292087197, 0.0019272174686193466, 0.0023211732041090727, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1707, 2956, 9336, 2352, -2835, -3279, 17223, 2379, 2794, -1545, 9276, -188, -7379, 2169, 12915, 6226, 13893, 5416, -2320, -4377, 3573, 31747, 15916, 16323, 1043, 759, 4364, 2633, 2055, -3594, 5651, -2816, -222, 4683, 6, 837, 10310, 2884, -1879, 4936, 7701, 5284, 4274, 11089, 3192, 4878, 1441, 7694, 3339, -4836, -6213, 267, -143, -1156, 1756, -13, 96, -795, -3686, 8184, -956, 1779, -1100, -1788, -3467, 7443, 19453, 1908, -1907, 706, 1466, 1860, 1456, -1048, 533, 8968, -397, 15291, 15551, -894, 7814, 1773, -351, 1740, 12562, 7389, 4147, 1587, 5030, 3673, -303, -8881, 565, -1741, -1598, -1935, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00035998952807858586, 0.00053140032105147839, 0.00025613035541027784, 0.00038909085560590029, 0.00037338677793741226, 0.00045007627340964973, 0.00019356030679773539, 0.00030585235799662769, 0.00021514044783543795, 0.00042317548650316894, 0.00021305448899511248, 0.00032535180798731744, 0.00034361123107373714, 0.0012922454625368118, 0.00024059572024270892, 0.00018838333198800683, 0.00013549280993174762, 0.00026596628595143557, 0.00084116199286654592, 0.00038313277764245868, 0.00016740923456382006, 8.5923966253176332e-05, 0.00019260843691881746, 0.00010057286999654025, 0.00019093105220235884, 0.00064736593049019575, 0.0006834713276475668, 0.00041306696948595345, 0.0002472713531460613, 0.00054229778470471501, 0.00026436298503540456, 0.00027371809119358659, 0.00029710002127103508, 0.00024613438290543854, 0.00034104747464880347, 0.00029972079209983349, 0.00018519570585340261, 0.00037320458795875311, 0.00032119412207975984, 0.00035585567820817232, 0.00016179966041818261, 0.00048953702207654715, 0.00035614264197647572, 0.00021069184003863484, 0.00058275472838431597, 0.00020914885681122541, 0.00035235667019151151, 0.00027532901731319726, 0.00040511885890737176, 0.00027295714244246483, 0.00025392085080966353, 0.00018325989367440343, 0.0010173774790018797, 0.00026524972054176033, 0.00045006908476352692, 0.00046126282541081309, 0.0006914599216543138, 0.00030800994136370718, 0.00041812585550360382, 0.00022578213247470558, 0.00079085992183536291, 0.00038317881990224123, 0.00024784557172097266, 0.00045660245814360678, 0.00054161535808816552, 0.00025939609622582793, 0.00011306493252050132, 0.00021345987624954432, 0.00061719102086499333, 0.00046733440831303596, 0.00027591906837187707, 0.0002552927762735635, 0.00093126355204731226, 0.00039917355752550066, 0.00030418558162637055, 0.00024074978136923164, 0.0003319203678984195, 0.00012218167830724269, 0.00011690575047396123, 0.0002110671775881201, 0.00018674315651878715, 0.00017830636352300644, 0.00019869541574735194, 0.00014626860502175987, 0.00014520774129778147, 0.00031996099278330803, 0.00056796835269778967, 0.00017746140656527132, 0.0001433459110558033, 0.000562467728741467, 0.00032263444154523313, 0.00022098244517110288, 0.0003450267540756613, 0.00059184560086578131, 0.00039335241308435798, 0.00021389091853052378, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -45,108,1,-127,-41,-41,-42,-81,-20,11,1,78,19,-67,-16,37, 
  /* [1][0][][] */ -42,23,-55,2,-30,-22,17,-70,62,51,-46,11,14,10,25,-127, 
  /* [2][0][][] */ 22,14,-33,33,60,13,-62,-82,127,-46,-8,18,-25,100,-66,34, 
  /* [3][0][][] */ 57,-67,0,-92,-9,-23,5,1,127,-2,73,62,-4,53,10,113, 
  /* [4][0][][] */ -72,52,13,34,19,-24,2,36,-9,7,21,-18,-127,-20,-12,44, 
  /* [5][0][][] */ -7,63,108,1,23,65,-87,63,-39,57,-21,-37,32,-33,-127,3, 
  /* [6][0][][] */ 33,-44,127,-117,46,4,-56,87,-69,-110,61,-47,18,86,-48,76, 
  /* [7][0][][] */ 56,119,-24,-56,98,22,4,-60,127,100,-40,33,28,-31,67,55, 
  /* [8][0][][] */ 8,-83,4,-95,29,-61,14,-77,23,56,70,-13,15,127,87,57, 
  /* [9][0][][] */ 9,-34,-4,127,36,-6,42,-56,-58,111,29,-19,0,-59,-11,-11, 
  /* [10][0][][] */ -6,27,-40,-127,21,-10,-4,30,24,-45,7,-34,-21,-47,-5,34, 
  /* [11][0][][] */ -10,26,24,-11,91,-32,78,-61,-68,29,2,20,1,127,-76,-43, 
  /* [12][0][][] */ 66,-27,-127,-21,57,-92,-13,12,-9,24,-87,-28,-42,125,1,17, 
  /* [13][0][][] */ -21,10,-26,3,0,-127,-6,12,1,-13,10,-10,11,-20,12,14, 
  /* [14][0][][] */ 40,-49,113,-30,60,21,-127,-91,-21,-30,34,30,9,-64,-23,-28, 
  /* [15][0][][] */ -70,20,-29,-51,-1,2,127,38,-32,44,73,-29,-11,62,58,3, 
  /* [16][0][][] */ 20,56,127,85,4,16,82,61,-86,10,-61,-10,3,2,-9,-77, 
  /* [17][0][][] */ -47,-103,-15,27,-66,-28,-68,11,-127,-38,9,-51,-7,39,60,-39, 
  /* [18][0][][] */ 12,29,1,60,38,8,23,-4,68,35,-25,-19,-1,127,53,26, 
  /* [19][0][][] */ 2,2,21,-3,87,2,-81,-73,-82,-84,-31,-127,-55,-43,10,-28, 
  /* [20][0][][] */ 65,-2,-49,-43,30,-127,-6,14,-56,13,-98,-24,14,2,25,-11, 
  /* [21][0][][] */ 127,-45,56,-32,-5,-1,19,94,-21,-103,76,69,-26,111,75,116, 
  /* [22][0][][] */ -20,50,-37,127,-31,-4,91,52,-18,22,-18,28,-7,2,18,-9, 
  /* [23][0][][] */ 121,2,92,-127,65,-17,-5,32,-13,12,-19,-31,-40,-46,-107,79, 
  /* [24][0][][] */ -127,39,10,-11,-4,101,20,-15,2,18,91,-8,-68,22,49,-33, 
  /* [25][0][][] */ 23,30,1,15,17,-1,64,-60,-8,-127,-15,-28,-15,-31,14,20, 
  /* [26][0][][] */ -31,-5,4,9,-52,-9,-35,-29,-113,-33,-8,-31,16,127,-38,59, 
  /* [27][0][][] */ -11,36,6,69,40,-35,-25,-34,62,2,-24,-6,11,127,-15,7, 
  /* [28][0][][] */ 11,58,69,71,127,-2,36,48,-86,-15,-38,-27,25,102,41,-50, 
  /* [29][0][][] */ -8,-2,-3,11,28,2,2,20,-6,-13,-9,-127,-3,-4,-13,-5, 
  /* [30][0][][] */ -14,73,-46,75,-43,-15,46,-127,-48,62,-15,5,60,38,80,87, 
  /* [31][0][][] */ -30,-29,-11,-78,-16,10,-44,-109,25,96,-11,-127,-35,-54,8,28, 
  /* [32][0][][] */ -127,-69,-6,58,55,33,-16,11,-6,-44,-102,37,76,-1,52,65, 
  /* [33][0][][] */ -22,-30,-42,-13,-92,-23,-105,-10,66,7,10,-63,32,-127,125,25, 
  /* [34][0][][] */ 48,-7,63,22,49,16,-47,80,-84,-49,74,20,17,-10,-15,127, 
  /* [35][0][][] */ -46,58,-64,14,-8,-22,20,-113,82,79,-80,-2,0,-7,68,-127, 
  /* [36][0][][] */ -55,68,30,119,53,50,127,8,-6,44,-2,-46,-17,19,-96,-77, 
  /* [37][0][][] */ 0,-5,4,-52,-3,-1,-61,-56,-64,-18,13,-12,11,-127,52,-53, 
  /* [38][0][][] */ 56,89,-9,-45,127,12,29,-42,122,93,-26,9,18,-34,53,13, 
  /* [39][0][][] */ -26,57,-12,-127,-3,3,-33,31,40,-74,-30,-15,2,70,48,34, 
  /* [40][0][][] */ 9,-32,5,-109,-26,-1,21,-6,-127,22,5,-9,-15,-122,97,-51, 
  /* [41][0][][] */ -8,-8,-43,-19,4,-40,13,-15,-33,6,-43,-9,-127,10,29,30, 
  /* [42][0][][] */ 127,65,-36,-26,-53,-57,-18,-62,-4,13,65,-49,-66,43,105,-90, 
  /* [43][0][][] */ 1,94,-80,-13,58,-26,127,-37,38,86,-45,22,11,-121,-48,-36, 
  /* [44][0][][] */ -34,-36,14,-39,99,-11,-127,-126,-30,-1,-8,4,-17,-35,78,-77, 
  /* [45][0][][] */ 6,30,-127,-44,23,-78,40,-87,-6,36,0,-56,19,-30,63,-8, 
  /* [46][0][][] */ 13,5,-15,-90,-7,6,17,-37,-121,-29,-1,9,-15,-127,62,-20, 
  /* [47][0][][] */ 20,50,24,-21,127,-15,-26,18,-59,39,-5,20,5,5,119,-23, 
  /* [48][0][][] */ -127,-73,-15,41,65,24,15,-12,5,-11,-92,44,68,12,64,37, 
  /* [49][0][][] */ 29,0,104,72,103,3,43,34,-127,-38,-41,-59,16,116,14,-40, 
  /* [50][0][][] */ 45,-38,-91,-9,25,-127,-44,-1,-26,-11,-15,-28,65,-12,-23,9, 
  /* [51][0][][] */ 10,37,33,-8,14,0,-4,18,-127,53,1,-105,7,-110,-16,99, 
  /* [52][0][][] */ -10,28,-4,37,35,9,31,41,72,97,-32,-59,38,127,72,4, 
  /* [53][0][][] */ -11,-39,-9,-16,-88,-6,-91,-9,50,17,16,-68,29,-127,112,19, 
  /* [54][0][][] */ 68,-9,-40,-2,127,80,-123,-58,-97,-9,-38,-67,-7,-52,12,-27, 
  /* [55][0][][] */ 52,-18,14,4,31,-27,-74,-127,-27,-59,-52,18,2,-20,21,-1, 
  /* [56][0][][] */ -17,19,18,-27,-6,-21,-88,65,-4,127,-3,-20,25,2,-7,10, 
  /* [57][0][][] */ -1,13,-51,-22,-49,-47,127,75,-26,33,-23,-6,26,12,112,-5, 
  /* [58][0][][] */ 51,20,-127,49,96,124,-27,64,-99,-39,6,22,-33,38,-5,-29, 
  /* [59][0][][] */ -96,67,107,24,-87,-56,117,127,24,10,31,-16,19,14,61,-5, 
  /* [60][0][][] */ 4,5,-42,1,32,-127,-38,-7,-16,-26,-25,-31,29,-21,-13,0, 
  /* [61][0][][] */ 30,-11,26,127,84,32,38,8,-114,3,15,49,-23,28,44,-49, 
  /* [62][0][][] */ -57,127,7,-50,-29,-21,-74,52,-13,-72,-80,-62,-6,-90,-53,-42, 
  /* [63][0][][] */ -44,36,-19,127,-92,11,-73,-27,-64,-29,-31,-40,42,58,39,42, 
  /* [64][0][][] */ 15,1,-6,39,0,12,-3,67,22,9,-19,-41,-10,-127,50,-3, 
  /* [65][0][][] */ -11,-41,-1,-127,32,-39,70,-25,-16,51,7,-93,-5,-3,24,-38, 
  /* [66][0][][] */ 57,-33,58,-14,-7,20,16,113,15,-55,56,48,-5,127,13,67, 
  /* [67][0][][] */ 6,42,-16,-127,-12,-3,-51,27,74,-91,-30,4,23,75,80,41, 
  /* [68][0][][] */ -22,21,127,10,6,10,1,8,-44,-12,-18,-22,16,-20,88,-24, 
  /* [69][0][][] */ 127,66,-26,-17,-75,-40,-14,-43,-8,12,73,-52,-66,50,76,-68, 
  /* [70][0][][] */ 51,4,-72,-16,-27,24,69,127,-41,101,-51,1,14,66,-35,23, 
  /* [71][0][][] */ 7,1,-3,7,5,-74,0,21,-36,16,-80,0,-127,-1,41,47, 
  /* [72][0][][] */ 14,15,-127,15,-5,25,34,108,-35,-23,20,-2,23,15,3,4, 
  /* [73][0][][] */ -51,24,36,-3,53,-41,-75,-127,14,-71,32,-21,6,-49,43,-9, 
  /* [74][0][][] */ -11,31,29,127,9,-14,-83,79,-56,7,-31,38,25,-97,19,-97, 
  /* [75][0][][] */ -28,42,-48,18,23,-8,8,-10,127,15,-8,-21,25,123,-61,-18, 
  /* [76][0][][] */ -3,-17,0,23,-5,-10,-21,66,22,-27,-23,-127,-1,-5,5,4, 
  /* [77][0][][] */ -19,35,-6,127,-35,12,65,88,10,31,-16,24,-16,-20,-23,-23, 
  /* [78][0][][] */ -6,21,43,-114,62,-47,-65,30,36,-69,6,-59,36,127,3,36, 
  /* [79][0][][] */ -7,-90,-75,-51,-102,-1,27,-78,127,18,29,64,27,41,33,-55, 
  /* [80][0][][] */ -45,12,115,-83,43,-47,11,-116,-64,38,-65,-127,19,94,65,-46, 
  /* [81][0][][] */ -50,53,-127,30,73,-127,-22,58,-4,-47,59,-10,31,4,4,-9, 
  /* [82][0][][] */ 127,-13,-8,14,13,-113,-12,21,-25,-8,-94,1,109,15,-2,31, 
  /* [83][0][][] */ -26,70,-108,-88,-29,-25,39,-127,56,43,-54,-115,8,44,56,109, 
  /* [84][0][][] */ -82,35,89,-19,7,-16,69,-127,-22,66,5,-92,45,75,48,-42, 
  /* [85][0][][] */ -94,127,22,-123,-75,-31,-36,-5,-51,-6,-68,15,7,-15,-96,-29, 
  /* [86][0][][] */ -6,7,-40,-6,-20,-40,127,19,-5,-40,-10,8,-1,30,98,-13, 
  /* [87][0][][] */ -17,-44,-3,-127,4,-39,60,-18,-17,24,-13,-117,-20,-1,19,-33, 
  /* [88][0][][] */ 97,-8,32,-10,34,-114,-22,11,-46,22,-127,-53,23,20,70,6, 
  /* [89][0][][] */ 20,-18,-42,-47,17,-11,-20,-2,-44,7,43,-73,127,-2,20,-48, 
  /* [90][0][][] */ -5,-47,33,-50,54,1,-57,88,55,-68,-31,-28,-14,109,3,-127, 
  /* [91][0][][] */ -41,-7,-33,-57,28,-25,-34,-111,1,57,-11,-127,-44,-17,20,24, 
  /* [92][0][][] */ -19,19,40,8,-2,-127,13,0,-7,-22,-7,-10,2,-26,27,11, 
  /* [93][0][][] */ 32,-17,127,-14,-60,56,32,-24,-21,36,-63,-22,-23,-2,31,1, 
  /* [94][0][][] */ 32,-1,-17,-24,21,-19,-19,-12,-37,-25,12,-52,127,-20,41,-27, 
  /* [95][0][][] */ 127,91,-4,32,-98,-20,-75,0,-31,-25,80,-40,-41,24,87,-62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00085484015289694071, 0.001261876430362463, 0.00060821353690698743, 0.00092394487001001835, 0.00088665354996919632, 0.0010687623871490359, 0.00045963312732055783, 0.00072628463385626674, 0.00051087787142023444, 0.0010048830881714821, 0.00050592451589182019, 0.00077258853707462549, 0.00081594783114269376, 0.0030685984529554844, 0.0005713246064260602, 0.00044733975664712489, 0.00032174462103284895, 0.00063157017575576901, 0.0019974443130195141, 0.00090979668311774731, 0.0003975341678597033, 0.00020403719099704176, 0.00045737280743196607, 0.00023882284585852176, 0.00045338965719565749, 0.0015372512862086296, 0.0016229881439357996, 0.00098087918013334274, 0.00058717670617625117, 0.0012877538101747632, 0.00062776292907074094, 0.00064997782465070486, 0.00070550112286582589, 0.00058447686024010181, 0.0008098598918877542, 0.00071172445314005017, 0.00043977034511044621, 0.00088622095063328743, 0.0007627155864611268, 0.00084502378012984991, 0.00038421351928263903, 0.0011624668259173632, 0.00084570521721616387, 0.00050031411228701472, 0.0013838239246979356, 0.00049665011465549469, 0.00083671498578041792, 0.00065380317391827703, 0.00096200540428981185, 0.00064817088423296809, 0.0006029668147675693, 0.00043517351150512695, 0.0024158901069313288, 0.00062986864941194654, 0.0010687452740967274, 0.0010953262681141496, 0.0016419580206274986, 0.00073140813037753105, 0.00099289207719266415, 0.00053614791249856353, 0.0018779957899823785, 0.0009099059971049428, 0.00058854027884081006, 0.0010842595947906375, 0.0012861333088949323, 0.00061596842715516686, 0.00026848682318814099, 0.00050688715418800712, 0.0014655971899628639, 0.00110974395647645, 0.00065520434873178601, 0.00060622463934123516, 0.002211401704698801, 0.00094788754358887672, 0.00072232668753713369, 0.00057169044157490134, 0.00078818638576194644, 0.0002901356783695519, 0.00027760732336901128, 0.00050120538799092174, 0.00044344496564008296, 0.00042341076186858118, 0.00047182710841298103, 0.00034733308712020516, 0.00034481394686736166, 0.00075978739187121391, 0.0013487118994817138, 0.00042140428558923304, 0.00034039278398267925, 0.0013356499839574099, 0.00076613581040874124, 0.00052475044503808022, 0.00081930914893746376, 0.0014054113999009132, 0.00093406450469046831, 0.00050791073590517044, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -4189, 19222, -30236, -12974, -11754, 10982, 35848, -71543, -5349, 6094, 27587, 16486, -15535, 6013, 2464, 18348, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00073175737634301186, 0.00040929106762632728, 0.0002132348163286224, 0.00025188236031681299, 0.00040739166433922946, 0.00036894457298330963, 0.00034560012863948941, 0.00024083105381578207, 0.00032791146077215672, 0.00028118543559685349, 0.00078762200428172946, 0.00049467023927718401, 0.00051070639165118337, 0.00022057152818888426, 0.00050437665777280927, 0.00050250062486156821, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -30,-14,-4,-38,18,-8,-43,0,14,16,-3,4,5,1,-34,-3,-5,-5,6,-4,10,-28,7,0,13,24,17,127,36,-42,57,-14,-5,8,5,-1,-16,12,-41,-12,-7,5,2,33,5,27,19,13,26,0,-17,7,19,-27,-10,76,-6,4,-45,-38,-10,28,0,-23,-47,-71,-25,44,6,16,16,-13,-14,-35,-2,-29,-40,15,-4,9,-1,-28,28,20,-3,-20,-15,-102,2,-5,4,-11,49,-37,-40,-2, 
  /* [1][0][][] */ 29,-70,-75,-55,127,-19,45,26,-25,-88,-55,-5,12,-18,-53,50,-53,6,54,42,26,29,-8,-59,3,13,-12,-76,40,-6,-79,28,-27,31,2,-15,3,-7,8,25,-41,40,-47,9,-33,79,9,17,10,-90,10,-63,-13,33,52,19,-58,-25,-34,-41,27,-13,14,-47,-64,94,-18,-16,-15,-12,-15,21,57,-105,-13,4,63,-56,25,2,21,-31,29,11,-43,40,-24,37,24,-58,-5,4,28,-3,32,112, 
  /* [2][0][][] */ -3,71,-91,-33,83,114,54,100,8,-117,2,-14,-3,15,25,13,22,-26,-54,70,25,9,86,21,63,4,-14,-32,44,-17,62,-59,47,54,-14,67,-127,-97,18,32,33,-70,17,-70,41,-50,10,68,-4,32,-12,34,111,4,-25,71,28,25,36,0,50,26,22,-3,21,11,-40,-8,-55,-18,-22,-37,-41,-76,6,62,68,59,61,0,46,-35,12,-25,-53,20,21,41,-29,39,23,-23,-11,-34,-68,-13, 
  /* [3][0][][] */ 83,16,97,-18,39,-34,31,2,-7,-68,7,-32,-15,39,43,98,12,1,18,0,127,-4,35,22,40,-47,-20,28,40,35,-14,93,-97,22,42,9,-13,-19,-14,40,-64,-34,67,-5,19,29,-47,-96,-48,-9,-26,70,2,-106,4,34,-91,82,69,30,27,90,-31,-35,31,72,-18,-51,29,-47,3,-66,73,-22,48,-20,13,6,68,42,-30,-72,19,-13,-26,32,24,34,18,27,27,41,33,98,36,-58, 
  /* [4][0][][] */ 19,6,11,-18,127,16,-13,-27,-54,-48,-37,-25,-26,28,-14,37,21,-86,-33,107,-20,11,25,-27,5,24,6,-36,11,-5,54,-33,89,11,-20,13,38,3,6,2,-27,-5,-19,-21,3,-49,-10,3,40,-2,-8,18,1,-33,12,-29,30,-27,-38,25,-6,45,64,12,50,49,-25,-13,-48,-13,34,57,12,-73,-47,-16,19,26,63,-27,-3,-35,3,-13,-58,12,26,58,-44,31,5,-31,7,-3,21,-26, 
  /* [5][0][][] */ -2,-13,-24,0,13,-13,60,-15,-17,-33,-10,10,2,33,-6,7,-10,-11,6,-8,35,23,-51,65,14,-26,23,-101,-2,23,29,30,-11,5,7,-43,33,34,-18,5,-3,-17,28,-58,-9,17,9,-33,-10,-10,10,3,3,-20,-6,-62,-9,26,-32,22,71,14,-9,52,-11,65,8,72,9,74,8,25,22,19,-21,76,-45,-4,24,13,-7,-5,-1,7,-15,16,-13,127,2,47,3,-8,-1,27,-49,17, 
  /* [6][0][][] */ 16,-88,22,-47,-35,25,62,41,7,14,6,-82,-20,9,-33,17,2,-15,-14,-18,-57,51,-4,10,-33,-21,18,-22,-19,-2,65,-4,53,7,58,2,-5,5,3,-106,-18,89,-4,-65,17,7,-31,2,-4,48,-39,84,-13,-56,-8,-26,-22,-63,-20,14,-18,66,25,-67,20,-28,14,-30,4,1,127,-11,-29,23,-36,41,-112,3,25,-8,32,53,18,-14,-37,-1,56,12,13,41,52,-42,-18,7,-31,-5, 
  /* [7][0][][] */ 36,125,63,21,127,61,60,-23,-17,-32,39,-13,-54,26,36,44,10,-34,-13,10,45,-38,33,20,-7,-28,9,25,18,-15,10,22,55,-1,-36,7,24,22,-15,89,-40,37,17,7,-15,-25,27,-36,-17,-10,50,37,15,-26,-50,65,62,31,-8,3,18,-43,-21,5,-57,89,-34,-100,-12,-46,10,74,3,-8,3,16,63,76,72,-18,-61,-46,-9,-2,-25,71,12,-11,-37,40,-31,-38,-46,6,34,-30, 
  /* [8][0][][] */ 11,-16,66,32,-127,-17,58,4,38,82,57,11,-29,16,33,17,-57,26,-1,-6,-45,-7,-117,75,2,-58,54,-6,-1,4,0,46,68,-8,12,9,-16,-5,2,43,9,-28,38,0,-34,-9,38,-16,-101,25,33,44,-61,-29,-22,61,15,-31,-70,-24,24,-26,-31,-5,0,71,-8,-53,29,-20,-34,-24,46,59,36,-3,-19,-34,1,17,-108,6,-11,-5,24,42,73,32,26,-33,41,46,7,10,33,-6, 
  /* [9][0][][] */ 13,-100,-5,11,71,85,0,-7,42,-32,80,84,-25,25,80,-94,-8,-21,-15,16,-53,-31,20,3,-22,-19,-9,36,-30,9,15,-6,26,23,-85,57,12,17,-23,54,41,-82,-16,19,5,-8,-64,-39,47,35,4,-35,42,37,-19,-44,3,98,-2,9,42,-54,-44,127,-85,-3,-8,-26,5,9,-55,-78,65,1,-20,37,42,-57,46,3,-15,-13,9,16,1,-40,31,-6,13,-19,-43,41,-65,12,-15,-52, 
  /* [10][0][][] */ -53,-28,-41,-40,-18,5,66,-19,38,39,24,33,36,1,-8,-13,-21,11,-27,-19,-8,40,12,16,-5,-19,27,-127,18,-49,72,-39,-3,27,1,-3,-3,28,0,-13,9,-37,14,-65,11,14,22,17,-1,31,-38,-11,-31,-18,-7,-64,4,14,-22,-40,16,19,-9,18,-40,82,-12,-22,15,-25,-6,-16,-27,-1,22,53,-20,37,-17,11,-20,3,8,15,-4,-29,-4,110,0,19,9,9,23,-33,40,-29, 
  /* [11][0][][] */ -106,21,3,-6,25,-61,5,14,-60,-4,3,8,32,42,-39,-8,45,1,-79,-70,14,14,-22,11,87,-16,87,2,-25,16,-23,25,-3,27,-8,3,-2,14,12,13,-10,-22,10,-14,83,20,87,2,67,63,-9,49,7,-66,28,-10,-87,-19,-38,-43,-8,-17,-11,33,-22,-23,30,-5,36,-4,-19,24,-30,18,24,5,-37,92,-114,74,-47,10,-72,-87,127,16,51,-23,15,80,-38,-56,-30,56,-35,-4, 
  /* [12][0][][] */ 7,-8,-26,1,51,21,7,-1,-3,14,18,-10,-9,-17,27,0,-30,-1,0,-14,-2,-14,-38,43,-21,16,-28,90,-6,24,-33,8,-9,30,13,40,-10,-11,9,5,1,-16,-2,-12,-15,-2,18,4,2,3,7,-11,-13,14,-15,-5,5,5,29,19,-9,-21,-11,41,33,-63,7,48,-20,-127,-2,44,15,9,3,75,6,-7,11,-2,-17,20,-43,-1,11,-3,14,-52,-7,15,9,5,-35,42,-13,4, 
  /* [13][0][][] */ -60,56,8,6,-70,-2,4,46,-29,-23,39,20,85,9,-14,8,-38,31,-66,-17,27,-9,34,-46,49,12,5,13,7,-41,-34,-87,-88,-35,13,22,-2,34,9,-17,-31,87,7,4,49,6,-6,-10,80,5,42,113,67,-56,68,-16,-13,72,44,10,7,42,-27,26,-5,-15,-3,2,10,8,33,-127,18,-18,-105,8,31,47,-20,-44,76,-34,2,-37,25,-16,105,5,-30,11,-20,25,39,-29,-14,-13, 
  /* [14][0][][] */ -42,33,-15,-52,19,-7,-23,21,-104,-7,17,16,-13,-65,-91,-30,-91,-10,74,13,33,-4,25,-121,-39,42,-57,-25,20,-26,-17,-30,-71,-31,9,7,-20,-10,17,-6,-2,88,-74,8,-54,14,11,17,127,-33,23,-18,37,44,-120,16,-30,15,-114,10,-8,36,60,19,8,18,-7,3,-51,38,61,37,19,-25,-26,13,49,-86,-56,-100,29,-40,14,46,42,-83,-52,21,-48,17,30,48,5,24,18,-8, 
  /* [15][0][][] */ -52,-79,-12,-33,8,30,0,-57,-31,27,10,-31,43,1,31,-19,-92,-15,1,5,-28,12,-57,-38,-3,8,9,2,-24,-19,66,-73,-4,26,11,-6,-20,27,-89,-6,23,-67,-1,22,-23,-32,47,24,46,14,-18,-127,-5,35,-1,25,18,-22,-32,37,7,-10,43,-1,0,-3,3,-6,-21,35,0,37,-41,9,0,-30,-38,-14,-7,5,-19,42,-2,63,-10,-53,-33,-31,-32,63,24,68,-39,4,-3,5, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.03109968826174736, 0.017394870519638062, 0.0090624792501330376, 0.010704999789595604, 0.017314145341515541, 0.015680143609642982, 0.014688004739582539, 0.010235319845378399, 0.013936236500740051, 0.01195038016885519, 0.033473934978246689, 0.02102348580956459, 0.02170502208173275, 0.0093742897734045982, 0.02143600769340992, 0.021356277167797089, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 12872, 61579, -1715, -1036, 12986, -6462, 48, -927, 5614, 9153, -3253, -325, 10, 2948, 5383, -9499, -4260, -637, -435, 17029, -11108, 13311, -2655, 7928, 20054, 340, -5261, 16511, 13378, -20077, 1682, 22501, 23644, -10345, 557, 980, -56, -788, 1679, -9033, -6137, -160, -9657, -169, 29945, -2042, 12507, 1115, -14723, 1644, -83, -377, -2847, 14380, -4016, 15850, 18095, -615, 35670, 574, -8769, -654, 1006, -172, -2546, 14987, -1395, -8072, -2614, 5053, 470, -4117, 2210, 396, -2663, -8284, -47, -1254, 40233, -7273, -6958, -11233, -151, -376, 63112, -13655, -10569, -27243, -7108, 7824, -2174, 36640, 166, -1371, -2745, 734, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00018737078062258661, 9.2845992185175419e-05, 0.00010737328557297587, 0.00022065271332394332, 0.0002636162971612066, 0.00012440761202014983, 9.9968608992639929e-05, 8.3232553151901811e-05, 0.00025702838320285082, 0.00026632877415977418, 0.00029281870229169726, 0.00010557160567259416, 0.00027753505855798721, 0.00019438887829892337, 0.00038851742283441126, 0.00017064213170669973, 0.00020273383415769786, 0.00018604524666443467, 0.00023073778720572591, 6.7732202296610922e-05, 6.9238725700415671e-05, 4.5156946725910529e-05, 0.00014133502554614097, 9.6992174803745002e-05, 8.0704558058641851e-05, 0.00015308329602703452, 0.00015582142805214971, 0.00018451343930792063, 7.3878589319065213e-05, 0.0004916291800327599, 0.00035099789965897799, 0.00022751149663235992, 0.00011216915299883112, 0.00016451094415970147, 0.00023069790040608495, 0.0004908256814815104, 0.00039182204636745155, 0.00021374961943365633, 0.00021604505309369415, 6.9924237322993577e-05, 0.00022205601271707565, 0.00023957766825333238, 0.00032273278338834643, 8.1987331213895231e-05, 0.00033977546263486147, 9.394012886332348e-05, 0.00010273494990542531, 0.00039190647657960653, 0.00065843597985804081, 0.00015102700854185969, 0.00044700552825815976, 0.00016519357450306416, 0.0002028523595072329, 0.00019127424457110465, 0.00020088267046958208, 0.00011839435319416225, 0.00015088061627466232, 0.00048432228504680097, 5.2676576160592958e-05, 0.00016274733934551477, 0.00031449855305254459, 0.000290089868940413, 0.00011664320481941104, 0.00014049514720682055, 0.00012849416816607118, 0.00011132353392895311, 0.00030967078055255115, 0.00027144397608935833, 0.00024059103452600539, 8.931948832469061e-05, 0.0002240060712210834, 0.00010195640788879246, 0.00027188661624677479, 0.00014389259740710258, 0.00026042782701551914, 0.00022247646120376885, 0.00014809874119237065, 6.9130794145166874e-05, 6.4190724515356123e-05, 0.00018101575551554561, 0.00024315745395142585, 0.0002292245626449585, 0.00017533834034111351, 0.00028005187050439417, 5.6236211094073951e-05, 0.00011572599032660946, 8.1409809354227036e-05, 0.00048047024756669998, 0.00027171193505637348, 0.00012556376168504357, 0.00035667576594278216, 2.7499454517965205e-05, 0.00015876608085818589, 0.00010924274101853371, 0.00035739311715587974, 0.00028592158923856914, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -50,-73,-9,127,22,71,75,-57,-15,-19,-15,-5,-29,1,37,3,-9,-44,26,24,17,-127,127,5,-80,12,48,-28,-122,-127,36,24,13,25,62,-20,-31,-8,32,-4,-12,26,-108,68,24,-64,37,45,-19,49,-25,18,5,-6,16,48,-90,-50,-68,-21,-12,-1,12,36,69,-25,75,13,-6,14,19,127,22,23,28,1,-9,19,127,-6,-12,15,-27,21,125,26,-78,-16,0,-33,-16,-40,0,-26,-16,25, 127,-127,78,107,-42,127,38,-116,68,4,-17,127,127,-99,-13,17,12,127,127,-110,127,-77,81,66,-126,-109,-69,-34,-53,48,-60,-21,-90,57,-127,-86,-43,-13,-49,67,1,127,127,79,-51,-109,-108,-51,-16,-127,44,84,68,-30,44,81,-47,42,-81,-114,-45,-43,-60,67,73,-59,28,32,-77,30,-18,91,115,127,14,21,1,61,-34,54,66,127,127,-22,-8,78,-113,127,-118,-99,3,-127,-91,-127,-40,107, -77,-14,32,-81,15,-24,68,-7,80,-35,-27,17,-17,-5,-8,-12,-8,-16,7,-4,-19,-102,28,0,-127,88,7,-54,116,51,-15,9,3,14,16,-30,-9,36,21,18,26,12,-118,63,18,-17,37,13,-15,10,-18,4,-8,2,-1,19,-66,8,-43,50,2,41,34,-1,-6,-37,-30,24,9,2,-3,36,8,-27,-4,6,-11,-6,-84,3,-19,-25,-18,3,-110,13,-35,-23,-50,27,-26,-31,29,-28,-15,1, 
  /* [0][1][][] */ -66,-76,75,-35,-47,97,21,127,-51,-21,-1,-120,27,-116,78,31,-3,-59,-17,89,53,-75,48,50,-101,-8,127,-22,-25,64,120,-103,-127,94,-84,-57,-36,34,-25,98,-48,-26,-6,40,-49,127,-24,64,15,95,19,-2,16,-55,25,30,127,122,-74,-85,127,-33,-36,127,72,-37,-15,-1,127,36,127,97,-43,102,-4,15,13,15,-32,8,-42,121,-79,110,3,36,-51,30,80,-127,-33,-8,127,-68,-23,0, 67,126,58,-113,127,87,90,38,-127,127,127,-38,-63,-127,-127,127,127,-65,-123,-47,102,92,-123,127,-106,-87,-45,127,-127,110,-127,-127,-89,127,110,127,127,-127,-101,127,-64,-97,111,-127,-127,-33,-127,-127,127,-110,85,44,127,127,127,-127,101,-127,-127,127,21,-79,-127,-100,-127,127,-127,127,-119,-127,-107,-85,-127,-80,127,127,-127,127,-79,127,127,27,-40,-127,62,127,93,44,127,18,127,2,-67,34,127,-127, -54,-15,-49,38,-56,-95,38,-26,18,-33,-29,92,3,99,14,10,-3,65,-7,126,4,-90,-42,6,-71,94,-74,-19,-69,-16,16,-65,-69,39,9,-18,-30,48,-63,49,127,-5,-38,26,-39,-57,14,43,9,118,-11,6,-35,-71,4,18,96,6,-3,21,-30,127,93,-53,-42,13,38,-10,-76,121,-18,-87,-3,-55,-16,-19,26,14,75,-39,-68,-44,56,15,-48,-15,71,22,11,65,-45,20,-43,95,-26,-4, 
  /* [0][2][][] */ -65,1,-3,-18,13,-41,63,25,56,-27,-37,-3,19,19,-27,2,-7,68,7,1,-53,-87,3,-11,-22,-49,36,-68,88,38,27,25,16,-7,-9,-47,-8,35,-1,2,-15,-7,-69,99,3,33,9,34,-15,-31,11,-20,24,-2,6,15,-69,25,-15,11,14,0,-20,-5,0,-47,-44,14,-30,13,26,34,12,-21,27,4,18,4,-76,-13,-6,-9,18,15,-127,8,13,-44,-56,-49,-28,-49,9,55,-19,-8, 123,34,-127,-33,-71,-22,33,30,-65,-29,-20,-109,-76,120,-15,38,3,-52,-8,-127,89,-51,-38,0,-111,127,-51,21,-34,-22,-8,-7,-63,17,30,6,-24,-29,127,55,11,-15,67,-33,-39,76,-68,-46,-33,-7,-127,-127,-49,-25,-1,38,-65,-5,12,36,-7,-19,10,-47,-54,33,63,-22,114,109,-24,-69,10,-59,4,3,98,4,53,21,15,-98,-47,5,4,9,127,39,-56,43,-20,-111,42,77,-9,27, -51,13,-16,28,15,-69,-127,2,-10,-7,-16,3,16,-21,18,0,-8,-15,6,18,-50,-73,15,-1,29,-95,19,4,-47,-40,-4,12,43,-24,-3,-26,-36,3,43,-38,23,-2,-48,-33,3,66,22,13,-9,-3,8,-9,19,6,-4,-6,-60,-9,0,-41,-11,10,85,-11,35,-1,-1,28,2,9,-4,21,-19,15,2,15,36,-1,76,-13,6,-6,-7,-15,72,4,42,-39,58,45,-18,-51,-8,0,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0079632578417658806, 0.0039459546096622944, 0.0045633646659553051, 0.0093777403235435486, 0.01120369229465723, 0.0052873236127197742, 0.0042486656457185745, 0.003537383396178484, 0.010923705995082855, 0.011318973265588284, 0.012444795109331608, 0.0044867931865155697, 0.011795239523053169, 0.0082615269348025322, 0.016511989757418633, 0.0072522903792560101, 0.008616187609732151, 0.0079069230705499649, 0.0098063554614782333, 0.0028786184266209602, 0.0029426459223031998, 0.0019191701430827379, 0.0060067386366426945, 0.0041221673600375652, 0.0034299436956644058, 0.0065060397610068321, 0.0066224108450114727, 0.0078418208286166191, 0.0031398399733006954, 0.020894238725304604, 0.014917409978806973, 0.0096692387014627457, 0.0047671888023614883, 0.0069917147047817707, 0.0098046604543924332, 0.020860090851783752, 0.016652436926960945, 0.009084358811378479, 0.0091819148510694504, 0.0029717800207436085, 0.0094373803585767746, 0.010182050988078117, 0.013716143555939198, 0.0034844614565372467, 0.014440457336604595, 0.0039924555458128452, 0.0043662353418767452, 0.016656024381518364, 0.0279835294932127, 0.0064186477102339268, 0.018997734412550926, 0.0070207267999649048, 0.0086212251335382462, 0.0081291552633047104, 0.0085375132039189339, 0.0050317598506808281, 0.0064124260097742081, 0.020583696663379669, 0.002238754415884614, 0.006916761863976717, 0.013366187922656536, 0.012328819371759892, 0.004957336001098156, 0.0059710433706641197, 0.0054610022343695164, 0.0047312499955296516, 0.013161007314920425, 0.011536368168890476, 0.010225119069218636, 0.0037960780318826437, 0.0095202578231692314, 0.0043331473134458065, 0.011555180884897709, 0.0061154351569712162, 0.011068182066082954, 0.0094552496448159218, 0.0062941964715719223, 0.0029380586929619312, 0.0027281057555228472, 0.0076931696385145187, 0.010334191843867302, 0.0097420439124107361, 0.0074518793262541294, 0.011902204714715481, 0.0023900389205664396, 0.0049183545634150505, 0.0034599166829138994, 0.020419985055923462, 0.011547757312655449, 0.0053364597260951996, 0.015158720314502716, 0.0011687268270179629, 0.0067475582472980022, 0.0046428162604570389, 0.015189207158982754, 0.012151667848229408, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1495, 8743, 10542, 28932, 15568, -2896, -1711, 4722, 30340, -4334, 8366, 3263, 8488, 9031, 27624, 1526, 1892, 7257, 13162, 3998, -216, 302, 10360, -1046, 4597, -144, 11661, 5789, 5706, 37794, 36208, 16142, 8214, -586, 9609, 2541, 1019, 3047, 17412, -700, 13053, 8430, 30483, -3264, 29403, 7361, 4303, 12676, 66516, 8477, -428, 6521, -3276, -175, -1817, 7297, -352, 11666, 5770, 7433, 4798, 13501, 7722, 4636, 10047, 7746, 4381, -5621, 8950, -2317, 4178, 8949, 14627, 4461, -3601, -4192, 5921, 486, 1955, -989, 16193, 12282, 4620, 15604, 3379, 189, 8170, 79556, 6729, 8503, 4695, -223, 6213, 8538, 6182, 10870, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00022784239263273776, 0.00016976188635453582, 0.00017593635129742324, 8.0157733464147896e-05, 0.00019403656187932938, 0.00035374186700209975, 0.00050969858421012759, 0.00034151578438468277, 7.5757350714411587e-05, 0.00031873586704023182, 0.00032213484519161284, 0.00026883513783104718, 0.000148157705552876, 0.00025457533774897456, 8.6237596406135708e-05, 0.00038057356141507626, 0.00023939099628478289, 0.00017757125897333026, 0.00016321102157235146, 0.00030283789965324104, 0.00032919607474468648, 0.00075609469786286354, 0.00019460332987364382, 0.00058896886184811592, 0.00056930520804598927, 0.00024316746566910297, 0.00019047426758334041, 0.00024171643599402159, 0.0002864257839974016, 9.3456692411564291e-05, 7.7298587711993605e-05, 0.00015247757255565375, 0.00020331854466348886, 0.00036334016476757824, 0.00020747723465319723, 0.00024035559908952564, 0.00051731913117691875, 0.00047055064351297915, 0.00015679672651458532, 0.00078626023605465889, 0.00014409644063562155, 0.00018761387036647648, 8.9107175881508738e-05, 0.00032294323318637908, 0.00011101269774371758, 0.00020639262220356613, 0.00040418771095573902, 0.00021319517691154033, 6.234787724679336e-05, 0.00024460474378429353, 0.00026442110538482666, 0.00025483706849627197, 0.00030604246421717107, 0.00028313189977779984, 0.00056385126663371921, 0.00015205779345706105, 0.0002924024302046746, 0.00015943274775054306, 0.00036491802893579006, 0.00019368859648238868, 0.00032501292298547924, 0.00010469595872564241, 0.00019271663040854037, 0.00021631731942761689, 0.00024830270558595657, 0.00024872782523743808, 0.00029182934667915106, 0.00022900421754457057, 0.00018477250705473125, 0.0003133355057798326, 0.0002677851589396596, 0.00017914833733811975, 0.00014133341028355062, 0.00023258278088178486, 0.00042864802526310086, 0.0003218844358343631, 0.00026825940585695207, 0.00027228513499721885, 0.00040228944271802902, 0.00036267179530113935, 0.00012394292571116239, 0.00013494692393578589, 0.00018870968779083341, 0.00012396337115205824, 0.00035153108183294535, 0.00033117734710685909, 0.00028400041628628969, 4.8949037591228262e-05, 0.00020745536312460899, 0.00026073012850247324, 0.00027163428603671491, 0.000353202223777771, 0.00023919880914036185, 0.00018702891247812659, 0.00018278862989973277, 0.00015546285430900753, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -12,80,-30,89,36,27,17,-16,49,17,-44,97,-34,-109,19,-127, 
  /* [1][0][][] */ 34,63,-4,-29,16,-23,127,-126,-1,115,-23,-16,12,-64,18,24, 
  /* [2][0][][] */ -126,38,-21,-45,44,-29,50,80,-49,48,127,-56,-61,23,-10,-55, 
  /* [3][0][][] */ -80,30,39,86,-7,23,87,127,21,74,-106,17,12,-51,-75,-74, 
  /* [4][0][][] */ 21,3,38,61,-23,57,-2,36,12,-18,-5,12,8,-4,-127,-16, 
  /* [5][0][][] */ -4,-27,53,-13,10,-21,7,25,-58,101,-29,-127,-30,12,-38,-4, 
  /* [6][0][][] */ 10,19,31,-8,38,64,-50,-43,-7,8,47,-10,127,-7,-13,-39, 
  /* [7][0][][] */ 28,2,127,6,-17,-22,15,5,-62,33,-67,-22,12,4,22,-24, 
  /* [8][0][][] */ 37,52,79,98,-31,127,44,73,58,33,27,-90,-6,5,-122,-117, 
  /* [9][0][][] */ 12,-127,88,39,30,-51,-20,14,121,-24,81,-17,-25,22,-106,-52, 
  /* [10][0][][] */ -39,-97,3,-18,-127,-18,-10,45,68,102,43,1,-30,57,95,-20, 
  /* [11][0][][] */ 18,-15,8,-75,30,-26,-109,-127,-35,31,-18,-40,35,-21,0,-64, 
  /* [12][0][][] */ -10,-17,-3,-19,-53,-38,-77,17,-58,-74,-19,39,9,127,91,63, 
  /* [13][0][][] */ -49,-105,-40,47,35,-34,-19,-18,34,20,-10,36,70,23,127,26, 
  /* [14][0][][] */ 4,-89,72,27,45,36,11,127,15,54,-2,-63,2,40,-70,116, 
  /* [15][0][][] */ 24,-29,7,69,13,5,99,4,2,-127,19,-25,5,-17,-7,-48, 
  /* [16][0][][] */ 26,-65,-39,49,9,21,33,-49,127,57,99,19,0,105,57,87, 
  /* [17][0][][] */ -104,-61,47,91,62,35,13,-42,127,-55,4,-93,17,48,-118,22, 
  /* [18][0][][] */ 10,13,44,38,-71,7,-25,75,-108,-46,-44,-84,13,-127,50,-24, 
  /* [19][0][][] */ 29,-11,-13,-63,1,-25,-65,62,86,-16,64,36,-22,54,45,127, 
  /* [20][0][][] */ 19,-20,65,-82,-5,3,-40,41,0,-48,111,-20,17,18,-28,127, 
  /* [21][0][][] */ -49,-13,22,-30,31,23,-68,-34,-17,61,9,28,-127,-8,21,-16, 
  /* [22][0][][] */ 16,-38,29,-24,21,-58,-9,-10,-127,3,-9,-36,-12,-5,61,-21, 
  /* [23][0][][] */ 10,24,23,-11,5,16,-20,-12,-3,-6,52,-17,127,-2,13,-46, 
  /* [24][0][][] */ -20,19,41,-58,-28,-23,57,22,-71,3,-14,-127,35,-101,39,-5, 
  /* [25][0][][] */ -91,-3,-47,70,124,-28,-64,-103,-74,50,-123,-72,-90,-67,-8,-127, 
  /* [26][0][][] */ 89,23,62,-127,121,-30,-6,-17,110,-78,-6,-38,-78,91,-45,125, 
  /* [27][0][][] */ 94,-26,20,-27,-35,-45,-3,-22,-19,19,-127,19,9,-13,-1,35, 
  /* [28][0][][] */ -120,4,-127,-67,44,-26,58,-53,-10,32,-28,24,47,-12,-18,23, 
  /* [29][0][][] */ -61,-28,7,127,-5,32,21,-25,-31,2,-69,44,39,-63,27,-48, 
  /* [30][0][][] */ 41,25,127,-38,40,40,-18,51,-32,-77,88,-29,-10,44,-51,72, 
  /* [31][0][][] */ 17,-83,3,-45,-2,-53,11,-43,1,40,79,12,-10,94,70,127, 
  /* [32][0][][] */ -15,79,-35,36,-127,21,-90,-48,-67,-47,2,59,22,64,31,70, 
  /* [33][0][][] */ 32,-15,31,127,16,7,33,-34,-88,53,50,-13,5,9,-1,89, 
  /* [34][0][][] */ 29,-9,21,-2,108,-26,-106,-10,-50,127,-34,-3,-42,1,-4,-1, 
  /* [35][0][][] */ 93,-37,-18,-10,35,-127,-15,4,-36,4,-95,-23,62,26,-2,57, 
  /* [36][0][][] */ 19,8,-127,10,42,3,-25,31,-16,-20,8,-11,5,8,-14,9, 
  /* [37][0][][] */ 12,8,127,-11,-56,49,43,-59,-15,34,-46,22,11,-19,3,12, 
  /* [38][0][][] */ -127,34,-10,50,17,59,28,-46,26,6,92,-10,-22,-17,-12,-37, 
  /* [39][0][][] */ -31,2,6,36,32,-9,-127,44,13,35,11,-59,6,-19,-3,-16, 
  /* [40][0][][] */ 6,97,-26,127,2,50,45,33,-69,-39,-31,83,34,29,-68,-57, 
  /* [41][0][][] */ 34,11,-43,-27,-58,-9,127,90,-60,84,-54,-20,19,67,15,0, 
  /* [42][0][][] */ -3,-25,-11,-21,4,21,-43,43,53,-68,127,33,-25,22,-29,25, 
  /* [43][0][][] */ -126,-26,44,2,69,-4,-89,-63,-39,31,22,-33,-127,-3,38,-32, 
  /* [44][0][][] */ 8,2,-23,-11,2,-29,-14,-57,127,-15,30,45,10,76,10,51, 
  /* [45][0][][] */ -55,-108,47,-61,59,9,-17,76,20,-85,0,-21,43,127,-20,79, 
  /* [46][0][][] */ -57,18,-33,68,-90,-26,10,-67,-127,53,-13,-19,5,29,20,-23, 
  /* [47][0][][] */ -3,-8,-127,115,-6,27,10,-26,1,81,52,82,-15,-5,32,-17, 
  /* [48][0][][] */ -43,16,37,-126,54,22,-43,-29,-15,31,39,10,8,87,127,11, 
  /* [49][0][][] */ 20,31,72,50,-22,51,-49,-27,-6,-93,-127,-2,-42,-40,-68,-109, 
  /* [50][0][][] */ -7,34,7,-127,49,6,-29,34,101,-26,-6,-21,0,-31,19,1, 
  /* [51][0][][] */ 24,-35,12,-38,47,-29,-7,-127,-3,-99,-10,-33,-34,0,-11,13, 
  /* [52][0][][] */ 41,18,9,39,42,-20,-71,127,-105,124,-58,-27,71,95,2,-57, 
  /* [53][0][][] */ -16,106,37,-77,-28,37,24,-30,-38,-61,-62,94,1,-127,-112,-19, 
  /* [54][0][][] */ -13,10,12,24,45,-35,-1,-42,1,22,-5,-36,-12,127,-37,-25, 
  /* [55][0][][] */ -111,127,93,-41,51,-15,-32,-12,-81,6,118,-43,-9,-46,127,-1, 
  /* [56][0][][] */ 54,-8,13,-101,70,-9,-19,14,43,-32,21,127,-23,-1,74,46, 
  /* [57][0][][] */ -32,-7,11,55,-40,35,50,127,-14,-1,8,-24,0,57,14,-2, 
  /* [58][0][][] */ 29,118,-3,-127,7,24,-9,23,99,-4,-15,98,-3,-81,34,79, 
  /* [59][0][][] */ 28,51,61,-127,-45,24,22,-20,11,42,36,-39,-4,-106,-68,23, 
  /* [60][0][][] */ 60,-19,127,-70,-48,101,22,-25,-24,19,-56,-36,25,2,52,7, 
  /* [61][0][][] */ -3,53,-52,-51,-55,-10,127,108,-20,75,-23,5,26,40,26,-31, 
  /* [62][0][][] */ 9,20,-37,-31,-98,-42,-18,43,-44,-21,-3,-75,40,-127,57,35, 
  /* [63][0][][] */ 6,-1,12,-76,55,-15,-125,-127,-36,90,-21,-27,46,-18,-4,-74, 
  /* [64][0][][] */ -42,-18,25,75,88,-9,-33,-125,37,-127,-8,-75,4,-31,20,2, 
  /* [65][0][][] */ -127,30,35,-75,10,85,42,-62,-91,37,58,7,1,18,-26,-24, 
  /* [66][0][][] */ 51,6,90,24,-33,23,-26,50,-33,2,40,-69,-40,53,-127,-12, 
  /* [67][0][][] */ 51,-44,-22,64,77,-54,-92,-113,75,-127,-118,-44,-86,29,-65,39, 
  /* [68][0][][] */ -6,-25,-74,48,-71,-93,-8,-54,-7,3,69,-32,-23,80,127,-11, 
  /* [69][0][][] */ 1,20,-78,19,2,-127,30,82,-6,-5,15,-22,123,24,-20,21, 
  /* [70][0][][] */ 14,27,-31,-24,-25,-8,127,85,-21,52,-10,17,19,35,20,-4, 
  /* [71][0][][] */ 3,-29,-25,-53,37,2,6,66,-54,-65,5,6,12,-127,84,16, 
  /* [72][0][][] */ 26,20,15,46,44,-49,-38,-127,12,48,-56,-8,40,51,50,36, 
  /* [73][0][][] */ -57,-127,-32,-49,-53,-31,38,-28,-6,12,-32,-28,12,-34,71,-30, 
  /* [74][0][][] */ -36,45,53,100,-7,-1,-127,95,24,-34,-29,-40,-13,-3,-20,-3, 
  /* [75][0][][] */ -58,41,-51,-5,-52,53,84,105,9,52,14,-41,-127,70,24,47, 
  /* [76][0][][] */ -47,-19,-22,24,70,-63,-107,-127,-4,-25,-14,-7,0,-21,54,-101, 
  /* [77][0][][] */ -31,26,-60,-40,-78,-14,-9,-55,127,9,-73,5,-9,32,43,-86, 
  /* [78][0][][] */ -127,-109,-22,90,54,25,-43,30,13,-62,-99,43,41,-11,94,33, 
  /* [79][0][][] */ 39,-7,41,-55,127,16,38,18,73,15,-2,30,-4,-19,4,-35, 
  /* [80][0][][] */ -23,-56,46,-127,-12,-40,-8,-13,-95,-72,-27,-88,18,115,-57,16, 
  /* [81][0][][] */ 10,-10,36,80,-8,49,-24,-27,36,-19,6,-48,-13,42,-127,11, 
  /* [82][0][][] */ -34,4,2,-122,-49,-10,5,-18,-38,-11,-49,-81,31,-127,-80,3, 
  /* [83][0][][] */ -10,21,-51,-58,-36,-19,8,44,-78,13,31,-102,26,-127,13,52, 
  /* [84][0][][] */ 127,20,23,49,-67,-28,-77,4,0,-26,111,-18,-67,26,122,-107, 
  /* [85][0][][] */ -15,-8,12,-9,45,-9,-24,95,-61,-95,-43,-34,-29,54,57,-127, 
  /* [86][0][][] */ 15,12,18,-3,-96,88,-81,23,-100,-62,27,-22,-37,-127,-16,50, 
  /* [87][0][][] */ 127,-39,27,9,-53,-13,18,11,11,27,-94,15,30,-13,11,29, 
  /* [88][0][][] */ 50,41,-25,23,-21,-37,-8,10,44,25,52,4,5,-35,127,-109, 
  /* [89][0][][] */ 41,63,-37,24,-8,-5,2,-68,40,49,3,-40,-37,-17,-47,-127, 
  /* [90][0][][] */ -16,-35,-7,-58,-63,19,127,-42,86,-31,-1,-58,31,-12,-25,-15, 
  /* [91][0][][] */ -9,-5,-25,-100,-61,23,25,-42,-30,36,116,101,17,-13,59,127, 
  /* [92][0][][] */ 8,-14,-2,18,88,-15,-53,-127,55,-57,19,-28,-66,-10,11,-37, 
  /* [93][0][][] */ 72,42,41,-127,-61,-2,-33,40,42,-104,80,-13,-58,96,-50,45, 
  /* [94][0][][] */ -127,65,-83,14,93,-118,-35,8,-2,-95,89,-48,5,12,-36,-22, 
  /* [95][0][][] */ -1,57,13,-106,8,10,-38,37,-5,-47,-95,-127,21,22,-65,-31, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00064548099180683494, 0.00048093803343363106, 0.00049843039596453309, 0.00022708809410687536, 0.00054970855126157403, 0.001002156175673008, 0.0014439838705584407, 0.00096751947421580553, 0.00021462173026520759, 0.00090298359282314777, 0.0009126129443757236, 0.00076161406468600035, 0.00041973305633291602, 0.00072121585253626108, 0.0002443124249111861, 0.0010781707242131233, 0.0006781983538530767, 0.00050306209595873952, 0.00046237933565862477, 0.00085794442566111684, 0.00093261752044782043, 0.0021420279517769814, 0.00055131420958787203, 0.001668557757511735, 0.0016128504648804665, 0.00068889715475961566, 0.00053961650701239705, 0.00068478635512292385, 0.00081144866999238729, 0.00026476423954591155, 0.00021898807608522475, 0.00043197130435146391, 0.00057600456057116389, 0.0010293482337146997, 0.00058778619859367609, 0.00068093108711764216, 0.0014655729755759239, 0.0013330772053450346, 0.00044420754420571029, 0.0022274872753769159, 0.00040822740993462503, 0.00053151295287534595, 0.00025244199787266552, 0.00091490312479436398, 0.00031450067763216794, 0.00058471347438171506, 0.0011450699530541897, 0.00060398521600291133, 0.00017663248581811786, 0.00069296895526349545, 0.00074910908006131649, 0.00072195730172097683, 0.00086702301632612944, 0.00080211705062538385, 0.0015973992412909865, 0.00043078206363134086, 0.000828380580060184, 0.00045167541247792542, 0.0010338183492422104, 0.00054872274631634355, 0.0009207666153088212, 0.0002966052561532706, 0.00054596917470917106, 0.0006128302775323391, 0.00070344540290534496, 0.0007046497194096446, 0.00082675705198198557, 0.00064877246040850878, 0.00052346335723996162, 0.000887684291228652, 0.00075863947859033942, 0.00050752999959513545, 0.0004003997310064733, 0.00065891060512512922, 0.0012143664062023163, 0.00091190356761217117, 0.00075998302781954408, 0.00077138794586062431, 0.0011396921472623944, 0.0010274547385051847, 0.00035113221383653581, 0.0003823067236226052, 0.00053461745847016573, 0.00035119013045914471, 0.00099589291494339705, 0.00093823048518970609, 0.00080457754665985703, 0.00013867337838746607, 0.00058772420743480325, 0.00073865242302417755, 0.00076954410178586841, 0.0010006272932514548, 0.00067765387939289212, 0.00052985578076913953, 0.00051784300012513995, 0.00044042864465154707, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 847, -5310, -17872, 27616, 24570, 4183, -2930, -8842, 21611, 1841, 30018, 26138, -14377, 11964, 36434, -18589, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00051449763122946024, 0.00031384557951241732, 0.00031471785041503608, 0.00021409372857306153, 0.00035511286114342511, 0.00037295999936759472, 0.00026003681705333292, 0.00049560528714209795, 0.00021001491404604167, 0.00028799226856790483, 0.00032837328035384417, 0.00082094059325754642, 0.00048166426131501794, 0.00036348646972328424, 0.00047453423030674458, 0.00033178675221279263, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 0,25,-10,16,41,74,-26,-25,39,-4,4,15,-17,6,19,85,1,-7,-8,-11,103,-55,5,-17,-24,-38,-37,-104,5,-6,61,47,113,-10,2,1,9,-6,-33,22,-24,8,15,-36,-6,-38,-10,25,-14,24,-6,-17,-27,-17,-1,-1,41,18,-5,-23,-65,30,-12,-3,2,2,46,8,8,9,8,-34,-75,-11,-2,-4,-18,-86,4,-18,43,-20,-59,-53,27,-18,3,15,-19,8,27,-35,35,16,-5,127, 
  /* [1][0][][] */ 74,-81,25,87,-10,-33,-1,-43,-12,-98,-11,13,6,-55,-34,-34,-69,-1,35,9,-25,-98,-39,20,127,-67,-58,27,-25,100,-14,63,8,10,-41,27,-9,-20,32,-29,14,-86,70,-34,-47,19,48,-10,34,19,8,-41,57,-60,35,-51,23,30,-28,-90,21,-59,16,-58,-5,-73,30,45,45,54,-58,6,-108,43,-11,53,28,79,18,-35,45,1,-61,26,-88,63,10,44,-39,5,2,10,0,-31,32,12, 
  /* [2][0][][] */ 23,11,32,-25,5,-9,7,45,67,-18,14,62,-6,6,41,3,-18,-20,12,-7,-25,-52,-2,-60,9,7,-29,27,1,13,96,-62,23,-56,-23,51,14,127,-17,-3,-7,-25,-5,28,-21,-51,-60,32,23,33,-37,-21,23,18,11,-21,-24,0,-9,26,-8,25,69,89,24,-54,21,-62,-12,0,4,6,-10,-2,-17,11,33,51,7,23,11,76,24,3,-18,0,3,-5,11,-18,-8,-52,-27,0,2,59, 
  /* [3][0][][] */ -25,-18,-28,26,18,-37,-21,-22,-21,20,12,-3,11,-15,38,-23,30,-42,9,19,-19,0,-12,4,-16,13,-7,2,16,-53,40,-25,18,4,-22,47,-14,-9,-7,16,19,-54,21,-22,-9,2,-7,4,-127,52,-7,20,-121,-49,-17,-20,24,5,-18,43,2,17,15,17,-10,-82,-29,15,51,16,-4,20,-10,6,-21,-32,-37,-55,20,-39,8,-15,13,68,45,55,24,15,36,-1,-4,3,-29,-1,-21,-29, 
  /* [4][0][][] */ -6,-22,14,-82,-17,-25,-60,14,-25,-45,-25,-31,15,78,2,4,44,-19,-5,-4,-18,44,84,27,-7,-11,15,22,21,-15,-22,-10,-40,8,5,19,32,-22,21,-5,13,12,-103,-25,33,-11,1,-9,11,85,-5,-15,-28,-13,1,-9,1,-24,29,36,11,-2,-7,3,30,-122,29,-25,-49,16,-20,-7,3,17,-26,25,-21,76,46,0,11,2,127,-35,61,-15,-16,1,68,1,-5,37,-31,16,-4,-43, 
  /* [5][0][][] */ -16,-3,20,3,-8,-15,6,113,45,-13,-13,-17,-23,20,35,17,-14,-14,-10,-28,-47,-9,-3,-44,11,7,13,50,72,-6,50,36,-46,32,10,-16,-45,-45,-39,-5,-30,-14,-3,-2,59,2,11,18,5,14,-19,2,-28,-13,16,-2,-20,-24,-10,17,-60,22,-34,-31,20,23,-18,12,11,24,35,-9,21,-6,6,0,9,7,15,110,-2,-51,23,21,11,0,21,-38,-11,-14,25,-127,-27,-24,1,-100, 
  /* [6][0][][] */ -18,8,5,-52,9,-1,-6,27,-8,18,-15,10,21,-59,1,-17,-9,-71,38,5,16,10,-29,18,82,-18,-6,-19,26,-2,15,0,-26,-4,-8,-7,25,15,-6,40,0,-35,-51,-35,-3,-46,38,-127,8,48,5,7,-1,9,1,-47,51,-21,-1,4,8,11,-10,9,48,72,26,-21,-4,-5,43,-41,-1,-6,56,-15,-16,21,16,4,-7,-14,47,-44,0,41,20,-42,17,8,-31,-16,-14,3,-1,29, 
  /* [7][0][][] */ 18,2,41,-16,-4,-6,-6,-24,5,-6,-13,-17,-15,-86,28,-4,-4,-34,-16,-5,13,-19,-45,-10,-20,-5,-7,-10,-4,0,0,-3,-10,9,-8,-23,-1,-12,-21,21,4,-10,-18,31,1,22,-24,79,4,15,-15,-14,-24,7,2,-53,25,-8,-5,-10,-3,15,-6,-17,-7,54,9,-32,-4,-8,3,34,-3,-14,-13,15,44,0,3,-22,2,-29,43,4,-35,127,-3,6,-38,-12,5,22,-33,7,-12,2, 
  /* [8][0][][] */ -79,31,-39,-6,43,-18,-3,33,25,84,-39,11,19,27,68,-25,1,36,-91,27,28,26,-32,1,-42,-31,20,18,55,-91,-4,0,33,7,17,0,-23,43,-37,34,12,20,3,-116,-19,-11,43,-22,-45,12,4,74,-127,78,15,-3,-4,-18,-31,-17,19,-22,8,27,-29,41,23,-39,-2,15,45,75,-24,35,58,39,1,-87,-7,-33,-28,-10,34,15,-45,25,16,-41,-1,50,-24,15,51,-8,-10,-16, 
  /* [9][0][][] */ 14,-48,-8,-41,14,7,-26,19,26,-12,7,14,-54,-25,-10,1,-4,-2,33,-12,-24,10,-20,-38,41,7,13,-28,-36,-45,-37,-7,-13,21,11,36,10,41,-44,7,20,13,-23,-81,13,-3,33,-121,-32,2,-9,12,-20,15,-19,-3,-48,17,-24,3,9,7,7,31,36,127,42,42,16,-13,33,-34,-2,-11,-42,8,75,-13,21,18,-23,7,12,-44,12,41,-8,-3,-50,29,-33,-10,3,1,0,-19, 
  /* [10][0][][] */ 42,58,-14,37,76,-121,10,-15,12,46,37,14,-24,17,21,-93,27,43,-19,44,-83,-9,-15,-26,-75,-43,-61,44,11,14,-5,49,-14,-14,49,-25,107,-25,-27,-30,-1,75,50,-19,-75,-13,-40,9,-24,-23,-37,-6,-18,-12,7,-20,17,20,-37,-27,-8,20,-20,17,12,59,55,41,39,13,38,42,-64,-16,-57,-14,8,17,-34,3,38,-10,-73,-49,79,-44,109,-15,-27,20,22,-25,99,41,-19,-127, 
  /* [11][0][][] */ 37,31,-17,18,-7,5,51,9,-13,-13,-18,-4,-2,5,25,-4,-2,-7,-94,-1,1,10,8,-11,-39,-28,-13,-6,6,12,3,-9,-12,5,7,21,4,13,-32,13,6,31,56,-92,22,-44,1,-3,-127,14,5,-56,6,9,-8,17,-11,-15,8,1,10,-17,-12,11,-47,45,-13,15,24,-4,34,4,-53,-37,12,28,1,-38,-46,15,8,-7,71,35,15,-12,-11,-17,4,26,-12,-7,0,0,-13,18, 
  /* [12][0][][] */ -38,-7,12,4,-28,16,-3,11,127,7,-10,-5,3,-4,-43,-48,19,22,-4,74,48,26,-11,-32,8,-2,5,-25,-98,-10,23,-50,10,-6,4,-9,14,3,48,-18,-52,-14,0,21,9,38,-8,2,24,11,-45,7,8,4,12,-5,61,-28,-5,11,22,-13,13,-9,-3,42,-29,-11,-4,7,-8,-32,24,1,-65,12,34,-9,13,-55,-20,7,57,48,-20,-7,-27,-21,9,13,-3,32,-10,-25,9,7, 
  /* [13][0][][] */ 27,-9,-17,18,29,-6,11,-7,-5,9,17,10,14,-13,13,-19,12,-70,-39,17,-5,-21,14,9,-1,12,0,0,-13,-40,-11,19,4,10,12,35,17,2,12,3,5,6,18,42,25,10,-5,-127,26,-9,14,12,-9,3,19,6,-13,14,26,10,17,22,4,0,-6,-14,-25,-65,8,18,6,-39,-10,41,-3,21,-24,-1,14,4,28,-13,-11,27,21,36,6,27,-5,13,28,-2,11,18,-11,-9, 
  /* [14][0][][] */ -114,-56,17,40,37,-20,-39,3,-18,7,-3,19,59,22,-127,5,92,-11,-10,30,-9,4,30,42,-112,19,43,-29,-46,-64,-34,2,-21,2,15,-65,30,31,3,13,25,45,0,-36,10,122,64,45,-116,55,22,29,-58,-18,22,-11,20,4,61,61,39,33,2,42,4,-21,-45,61,-5,55,-69,-80,-69,17,-7,43,-18,55,85,-8,51,10,27,24,55,23,57,46,29,45,58,-6,-7,27,27,-23, 
  /* [15][0][][] */ 101,-7,35,12,9,98,58,-9,-10,48,-2,21,-100,-4,-15,41,9,43,44,-29,22,25,-73,54,14,11,57,-23,23,52,-43,-84,12,-68,54,-13,31,-28,-64,-99,13,28,-2,25,-12,52,-9,-42,97,-46,-69,12,45,-109,55,-111,11,-49,48,32,-127,1,6,11,66,-24,-60,52,-21,81,-16,13,14,25,25,-5,26,-56,57,-16,3,-5,38,66,-16,-9,2,-73,-11,24,87,-2,-59,55,38,-9, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.021866148337721825, 0.013338436372578144, 0.013375508598983288, 0.0090989833697676659, 0.015092296525835991, 0.015850799158215523, 0.01105156447738409, 0.021063225343823433, 0.008925633504986763, 0.012239671312272549, 0.013955864124000072, 0.034889973700046539, 0.02047073096036911, 0.015448174439370632, 0.020167704671621323, 0.0141009371727705, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 8695, -10381, 3038, 56864, -1946, -4410, -10166, 4994, -2249, 1694, 3205, -2077, 1973, -6324, 5127, -5068, -805, 16890, 23979, 2177, 3784, -3120, -968, -299, 17069, -333, -881, -4372, -5321, -7276, 7044, -9727, -269, -1347, -1508, 12255, 2054, -3666, 21083, 928, -565, 1429, -9151, -7532, -7882, 65452, 22, 16532, 28291, -12872, -204, 6358, 7637, -109, -5981, 2132, -11279, 1347, 2769, -8154, -2090, -764, -12759, -1011, 1393, 15852, 28945, 19897, -11798, 348, -9525, -1239, 48648, 12364, -203, 259, 19079, 35863, 25, -7631, -1300, -7259, 1156, -3010, 772, 1554, 1025, -911, 2224, -3214, 175, -302, 606, -1061, 46, 53232, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020517069788184017, 9.4022492703516036e-05, 0.00027213420253247023, 3.8137524825287983e-05, 0.00017556031525600702, 0.00017276141443289816, 0.00036626667133532465, 8.4188635810278356e-05, 0.000132073721033521, 0.00049429264618083835, 0.00017905421555042267, 0.00031301093986257911, 0.00010152236791327596, 0.00041186297312378883, 0.00017891215975396335, 0.00014786931569688022, 9.9443735962267965e-05, 0.00029269666993059218, 6.7492517700884491e-05, 0.00023150556080508977, 4.0600916690891609e-05, 0.0001718938146950677, 0.00012220865755807608, 0.00037137730396352708, 0.00020282481273170561, 0.00027113771648146212, 0.00014821978402324021, 0.00016321842849720269, 0.00010808424849528819, 0.00010592821490718052, 0.00012692289601545781, 0.00017731831758283079, 0.00011840480146929622, 0.00012086625793017447, 0.0001922578812809661, 0.00019301651627756655, 0.0003481172607280314, 0.00011775369057431817, 5.8577676099957898e-05, 0.00013999181101098657, 0.00021524920884985477, 0.00029851752333343029, 0.00038781290641054511, 0.00016968866111710668, 0.00015898096899036318, 5.9864207287319005e-05, 0.00019485334632918239, 0.00021349247253965586, 9.256780322175473e-05, 0.0001788181543815881, 0.00017237330030184239, 0.00022533937590196729, 0.00021437621035147458, 0.00031914230203256011, 0.00025619217194616795, 0.00039876837399788201, 0.00036906776949763298, 0.00016957901243586093, 0.00011894282215507701, 8.516477100783959e-05, 0.00029280132730491459, 0.00014509774337057024, 0.00029570370679721236, 0.00012264843098819256, 0.00020062450494151562, 0.00018438493134453893, 7.7262644481379539e-05, 8.1336838775314391e-05, 0.00037325959419831634, 0.00026498956140130758, 0.00020083689014427364, 0.00013674920774064958, 0.00011765142699005082, 0.00013731367653235793, 0.00015580930630676448, 0.00025934030418284237, 0.00051451631588861346, 5.1943279686383903e-05, 0.00025641609681770205, 0.0002416326169623062, 0.0001813829003367573, 0.00028851881506852806, 0.00011900536628672853, 0.00014631477824877948, 0.00012655208411160856, 8.6964013462420553e-05, 0.00012865547614637762, 0.00017276458675041795, 0.00019337964477017522, 0.00010399190796306357, 0.0002198369475081563, 0.00011589405767153949, 0.00014165550237521529, 0.00045603737817145884, 0.027333464473485947, 7.322040619328618e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -16,8,-19,108,-15,22,-62,-53,16,-7,96,-10,5,-9,-5,61,6,16,-37,2,74,2,32,-32,3,18,42,51,21,13,23,48,-5,28,9,-16,5,48,-62,-25,20,11,27,15,-87,-57,25,-6,-11,-23,-8,-8,49,5,-10,3,-4,-35,26,-29,27,-3,127,26,-15,-11,11,-52,64,35,3,-6,78,-34,69,4,16,-127,30,68,0,14,127,-13,39,31,-27,-18,34,-6,-15,82,1,20,-3,11, -47,13,-8,11,51,-9,-10,-127,36,11,-127,-7,-18,-12,4,100,18,-30,-15,-18,77,-96,127,27,-61,-30,-106,-15,26,37,-49,19,120,12,-13,-2,-24,127,-71,-127,9,-18,-29,14,46,-127,127,-46,-75,50,49,7,39,-64,32,56,35,42,-105,82,127,35,5,-20,42,-39,-98,-1,36,-31,-12,46,-50,-51,108,-4,-31,-59,-33,68,-68,64,-15,9,-11,50,54,-39,-29,52,-14,72,-127,-31,23,-127, 0,-2,-23,-75,8,17,37,20,-4,-3,2,61,0,-12,-11,13,-12,16,-22,15,7,25,23,-31,2,-32,9,15,-4,8,45,-78,43,16,14,-24,11,5,-36,-23,6,4,-17,8,23,-34,21,-1,8,-9,6,-5,5,5,-6,8,-5,44,7,-2,12,-18,4,-17,-28,-18,28,-51,-107,-8,43,-18,-127,-25,-10,16,11,-12,5,12,-15,21,-37,-4,-40,22,27,35,-26,-17,24,-12,17,7,-2,-46, 
  /* [0][1][][] */ -40,58,-18,38,-83,-17,-9,-44,26,92,-43,-21,-30,-25,-8,61,127,-24,-89,-13,57,-127,-28,16,-35,-47,-127,-4,38,37,-50,28,-127,-74,-56,3,65,-3,-49,48,-19,88,0,-3,33,-48,-12,-33,127,46,-3,20,44,9,-37,-16,31,9,-127,127,-35,-90,22,127,-59,-36,-85,126,-37,127,-20,54,-35,-58,36,8,-36,-71,127,50,127,37,7,0,127,29,-94,48,-38,-35,-101,40,97,103,28,-58, 127,127,127,127,-45,-127,127,21,127,-127,16,-127,-109,127,127,127,-16,-127,-63,-127,127,23,-66,127,127,127,-56,-127,127,127,-127,127,-10,-127,-120,127,-127,-45,88,110,-127,-127,127,127,127,-113,-108,127,-12,127,-127,-127,-127,127,127,-127,127,-127,-45,42,-103,-28,-67,-67,127,127,-73,127,127,-107,-127,127,-43,127,-127,-127,-127,122,-77,127,-43,127,81,127,-38,-127,-24,-103,-127,-127,-22,-127,-22,-127,-127,113, -23,65,-39,2,127,70,-22,46,4,23,-15,-5,-26,-30,-13,-4,-103,-23,-127,38,32,78,-12,-113,-34,-41,123,76,11,39,71,10,123,-47,127,-4,53,5,-94,13,34,24,-23,1,-23,-49,-13,-44,83,16,-11,39,-5,-5,-76,-14,25,20,127,-87,3,127,0,-37,-110,-28,-77,99,14,-17,118,27,-20,-61,13,47,-29,-9,-45,-3,-48,7,46,23,-89,37,127,-44,31,-22,127,-11,-114,36,33,17, 
  /* [0][2][][] */ -4,-39,-22,-63,-3,14,41,30,0,9,-21,53,24,-34,-6,4,43,1,10,22,-10,31,-17,-25,1,-25,11,4,-10,-8,49,-73,-40,70,-27,-24,31,-35,-59,19,9,10,-36,20,13,-78,-13,-1,-9,8,19,-7,8,0,-22,8,0,44,-48,36,-3,-13,5,15,-6,-11,23,-54,-54,11,-22,-10,-113,-34,-1,18,13,-14,56,16,20,27,-37,15,13,26,-20,12,6,25,23,-8,18,42,-7,-29, -27,-10,-27,24,-43,76,-24,64,7,-7,52,-11,127,-6,-17,-20,1,-40,-61,25,-24,79,-45,-109,-49,-48,101,73,13,42,53,1,-124,65,-12,-23,-29,-26,-127,-3,44,-13,-14,38,-26,-46,-19,-49,-60,30,71,25,-11,-81,31,53,18,26,74,-52,22,-58,-7,0,20,-27,-127,-55,-10,-27,-59,27,36,-49,-29,-7,-46,21,-57,0,48,36,21,11,6,64,-91,127,15,127,-30,-21,113,-19,46,81, -9,-32,-27,30,15,65,-43,12,4,-6,-2,14,14,-50,-8,-14,-42,-5,16,21,-25,6,-19,4,-3,19,-3,54,-2,-6,33,32,18,43,20,-22,-6,-26,-32,7,12,-11,21,10,-75,-32,-13,4,0,-14,1,-5,-9,7,-16,-4,1,-49,14,-27,-20,48,10,-29,-11,-3,37,-55,48,7,55,-19,30,-61,-19,23,11,9,-7,20,-31,36,88,-14,-17,54,41,-6,108,11,3,-22,9,-21,-7,-48, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0087197544053196907, 0.0039959559217095375, 0.011565703898668289, 0.0016208448214456439, 0.0074613131582736969, 0.0073423599824309349, 0.015566333197057247, 0.0035780170001089573, 0.0056131328456103802, 0.021007437258958817, 0.0076098041608929634, 0.013302965089678764, 0.0043147006072103977, 0.017504176124930382, 0.0076037663966417313, 0.0062844459898769855, 0.0042263586074113846, 0.012439608573913574, 0.0028684318531304598, 0.0098389862105250359, 0.0017255389830097556, 0.0073054870590567589, 0.0051938677206635475, 0.015783535316586494, 0.0086200544610619545, 0.011523352935910225, 0.0062993406318128109, 0.0069367829710245132, 0.0045935804955661297, 0.0045019490644335747, 0.0053942231461405754, 0.0075360285118222237, 0.0050322040915489197, 0.0051368158310651779, 0.0081709595397114754, 0.0082032019272446632, 0.014794983901083469, 0.00500453170388937, 0.0024895512033253908, 0.0059496518224477768, 0.0091480910778045654, 0.012686993926763535, 0.016482047736644745, 0.0072117680683732033, 0.0067566907964646816, 0.0025442286860197783, 0.0082812672480940819, 0.0090734297409653664, 0.0039341314695775509, 0.0075997714884579182, 0.0073258648626506329, 0.0095769232138991356, 0.009110989049077034, 0.013563547283411026, 0.010888166725635529, 0.016947655007243156, 0.015685379505157471, 0.0072071077302098274, 0.0050550699234008789, 0.0036195027641952038, 0.012444055639207363, 0.0061666537076234818, 0.012567407451570034, 0.0052125584334135056, 0.0085265412926673889, 0.0078363595530390739, 0.0032836622558534145, 0.0034568156115710735, 0.015863532200455666, 0.011262056417763233, 0.0085355676710605621, 0.0058118412271142006, 0.0050001856870949268, 0.0058358311653137207, 0.006621895357966423, 0.011021962389349937, 0.021866943687200546, 0.0022075893357396126, 0.010897683911025524, 0.010269385762512684, 0.0077087730169296265, 0.012262049131095409, 0.0050577279180288315, 0.0062183779664337635, 0.0053784637711942196, 0.0036959706339985132, 0.0054678576998412609, 0.0073424950242042542, 0.0082186348736286163, 0.0044196560047566891, 0.0093430699780583382, 0.0049254973419010639, 0.0060203587636351585, 0.019381588324904442, 1.1616722345352173, 0.0031118672341108322, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 13132, 1130, 8299, -543, 4543, 4728, 11658, 5546, -1142, 20169, 6088, 1118, 5774, 33689, -419, -1452, 8352, 9895, 1770, -161, -465, 14024, 4860, 2931, 6588, 4496, 5161, 4035, 11, -26, 5679, 7985, 16033, 1408, 7460, -549, 16345, 5903, 1018, 3948, 676, 9718, 13939, 4083, 2274, 10193, 10699, 5379, 4592, 3745, 214, -852, 16488, 5482, 6975, 11415, -205, 5281, 2844, 3931, 11421, 7428, 2236, 4633, 5161, 3800, 4656, -779, 13060, 7919, 8911, -1281, -1054, 3250, 1783, 2761, 21069, 14815, 13713, -2184, 4732, -3942, -1852, 582, 5862, 4150, 5019, 3586, 9251, 3975, 6889, 2996, 13446, 22171, -10982, 12075, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00019764095486607403, 0.00028952831053175032, 0.00017041331739164889, 0.0010131984017789364, 0.00034692400367930532, 0.00019624609558377415, 0.00026416024775244296, 0.00063946068985387683, 0.00041281103040091693, 9.1101843281649053e-05, 0.00023463281104341149, 0.00074366026092320681, 0.00047810195246711373, 0.00014268069935496897, 0.00019491212151478976, 0.00046284336713142693, 0.00026417459594085813, 0.00023489436716772616, 0.0002447634469717741, 0.00064293271861970425, 0.00050478079356253147, 0.00017590539937373251, 0.00031628744909539819, 0.00026109770988114178, 0.00026670843362808228, 0.00046228311839513481, 0.00027892726939171553, 0.00021525449119508266, 0.00064357684459537268, 0.00042537975241430104, 0.0002594746183604002, 0.00023126944142859429, 0.00012343864364083856, 0.00076802173862233758, 0.00022199681552592665, 0.00049022876191884279, 0.00013923215738032013, 0.00044279001303948462, 0.00049154151929542422, 0.00024293074966408312, 0.00070329330628737807, 0.00019159448856953532, 0.0001551676687086001, 0.00017823472444433719, 0.00050959258805960417, 0.00032144138822332025, 0.00026646317564882338, 0.00027392376796342432, 0.00033747672569006681, 0.00023696188873145729, 0.00048414981574751437, 0.00073947367491200566, 0.00016208377201110125, 0.00029198839911259711, 0.00033021904528141022, 0.00016315138782374561, 0.0004550310259219259, 0.00032802100758999586, 0.00028473639395087957, 0.0004179410170763731, 0.00014752699644304812, 0.00018760848615784198, 0.00046805100282654166, 0.0006008247728459537, 0.00019934844749514014, 0.00029174869996495545, 0.00041523654363118112, 0.00038838767795823514, 0.00020472970209084451, 0.00014962877321522683, 0.00022065258235670626, 0.00037632681778632104, 0.00035647742333821952, 0.00041183683788403869, 0.00022786814952269197, 0.00045858003431931138, 0.00011360616917954758, 0.00030639427131973207, 0.00012303797120694071, 0.00054940872360020876, 0.00023326955852098763, 0.00052670692093670368, 0.0002309965348104015, 0.00051139126298949122, 0.0002646278589963913, 0.00037872866960242391, 0.00032172695500776172, 0.00037668168079108, 0.00017955267685465515, 0.00040247730794362724, 0.00020110847253818065, 0.00055217632325366139, 0.00015857417020015419, 0.00012613889703061432, 0.00026846700347959995, 0.00027517683338373899, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 26,-24,98,107,69,-13,38,-28,127,-14,-57,-81,27,57,11,-77, 
  /* [1][0][][] */ 37,61,-40,-16,79,-22,-1,17,55,70,-47,127,-5,-44,108,-83, 
  /* [2][0][][] */ 22,-39,1,5,-42,67,-29,90,-59,-61,6,64,-21,-127,70,-89, 
  /* [3][0][][] */ 111,104,-9,27,-127,-25,-61,-24,2,0,90,-80,-47,88,-42,-28, 
  /* [4][0][][] */ 7,-6,20,32,-43,41,-20,53,-53,-33,-3,-1,4,-127,31,9, 
  /* [5][0][][] */ 127,-36,-23,-12,-2,-120,-27,15,-33,7,-114,11,21,-4,-40,37, 
  /* [6][0][][] */ -127,-43,0,78,-34,3,-62,15,-95,-65,-41,-24,12,56,11,54, 
  /* [7][0][][] */ -23,21,-87,45,58,-127,-32,37,-2,-28,7,-11,-28,23,-46,-2, 
  /* [8][0][][] */ 56,-36,-13,-12,-5,24,-51,-65,-16,18,-81,5,-127,-1,9,27, 
  /* [9][0][][] */ 43,-80,54,127,29,49,16,-69,123,-97,5,-37,8,54,-123,63, 
  /* [10][0][][] */ -69,-76,-14,-41,118,51,62,116,91,-62,-115,41,92,-119,-127,81, 
  /* [11][0][][] */ 32,-13,-127,-5,31,22,-19,31,-24,-26,-1,-15,-4,20,-41,19, 
  /* [12][0][][] */ 102,-71,1,7,-5,-58,-80,-48,56,14,-127,-37,-63,-39,13,52, 
  /* [13][0][][] */ 71,-124,13,-93,118,11,-114,-127,75,-18,12,90,32,-6,-45,32, 
  /* [14][0][][] */ -76,47,-101,-46,70,-127,77,-60,69,50,-1,-126,29,124,16,14, 
  /* [15][0][][] */ 9,2,58,44,53,-46,-31,-12,23,-59,-59,-16,-127,-43,-16,53, 
  /* [16][0][][] */ -96,46,-1,-21,-17,100,59,85,-38,38,127,-9,23,12,30,-24, 
  /* [17][0][][] */ -18,6,-56,-49,-37,14,29,64,-39,127,-9,-5,-11,72,72,0, 
  /* [18][0][][] */ -2,122,-41,25,11,9,40,-70,46,94,-57,127,46,-40,16,-112, 
  /* [19][0][][] */ 5,-16,24,19,-15,53,0,19,18,15,-55,-20,-127,-4,10,34, 
  /* [20][0][][] */ 84,-50,-18,-58,-33,12,23,-77,-42,26,-127,-22,24,-5,54,10, 
  /* [21][0][][] */ 49,-10,127,61,-21,58,35,9,-10,41,-15,-3,-26,69,-10,-6, 
  /* [22][0][][] */ 61,9,-6,-34,-46,-45,2,127,-12,-42,5,31,52,55,18,54, 
  /* [23][0][][] */ -14,32,-69,15,3,-127,1,33,-3,-22,-26,0,-33,-1,-12,41, 
  /* [24][0][][] */ 38,-51,7,-67,77,30,-15,-18,37,33,68,76,-45,72,127,50, 
  /* [25][0][][] */ -127,-89,-42,2,28,1,5,-53,-43,-31,-89,4,30,43,31,43, 
  /* [26][0][][] */ 20,8,34,-19,-15,17,-29,65,-95,-48,-16,11,8,-127,40,-4, 
  /* [27][0][][] */ -116,44,-44,62,12,-19,11,43,49,-26,127,33,-16,2,-1,-46, 
  /* [28][0][][] */ -17,-6,17,27,-6,2,17,81,33,13,-27,-8,-127,-9,-3,33, 
  /* [29][0][][] */ -10,68,39,-39,38,-26,14,-32,-127,26,-31,1,-8,38,-96,16, 
  /* [30][0][][] */ -18,9,-127,-22,32,-56,0,23,-1,-9,-14,-11,-41,-9,-10,25, 
  /* [31][0][][] */ 111,-51,-127,-3,32,-20,-59,32,-27,-2,-93,-65,35,-30,-78,45, 
  /* [32][0][][] */ -120,35,43,61,-21,126,-11,25,41,-33,127,15,-56,38,-31,-44, 
  /* [33][0][][] */ 8,-1,127,2,-85,43,22,-48,-1,34,-29,17,-10,-5,44,5, 
  /* [34][0][][] */ -4,-26,-59,-127,19,22,4,-24,-32,-61,0,-108,-45,7,12,35, 
  /* [35][0][][] */ 1,-48,29,33,51,-18,17,-15,-127,29,-1,37,-28,122,-49,-36, 
  /* [36][0][][] */ -71,50,-39,-29,-11,38,60,63,-14,39,127,-34,12,-8,3,-6, 
  /* [37][0][][] */ -42,17,127,-38,-66,-73,40,-32,20,20,3,16,6,-75,60,23, 
  /* [38][0][][] */ 0,-7,8,31,34,-27,-60,25,-10,-8,77,-5,127,47,-26,-1, 
  /* [39][0][][] */ -49,-9,6,-32,-56,-87,47,127,-41,-19,6,-43,-8,66,45,30, 
  /* [40][0][][] */ 75,-19,-32,-8,-31,66,-1,18,10,-2,10,-9,127,-3,-16,-19, 
  /* [41][0][][] */ 5,-29,-37,-127,31,7,9,-50,-3,-32,28,-41,-5,-29,-10,42, 
  /* [42][0][][] */ 19,49,25,127,-100,-25,-105,-5,-64,-70,71,-82,-53,124,-59,-27, 
  /* [43][0][][] */ 4,127,-27,123,11,27,49,-75,-24,86,11,13,-13,-48,60,40, 
  /* [44][0][][] */ 1,-7,-127,5,31,57,-28,49,-20,-8,32,-26,12,-38,-20,6, 
  /* [45][0][][] */ 3,5,-8,-127,-3,3,33,-42,-1,22,-39,14,-37,-75,17,-14, 
  /* [46][0][][] */ 12,41,51,-22,9,24,-34,41,15,-30,-26,-9,2,127,49,-11, 
  /* [47][0][][] */ 27,-23,22,-62,-45,35,-66,75,-8,-32,23,21,18,-127,40,32, 
  /* [48][0][][] */ 5,-6,1,-127,-16,-28,-4,6,8,-19,22,-13,-12,46,-11,55, 
  /* [49][0][][] */ 36,-46,-8,125,86,17,4,59,-61,17,37,35,-14,50,127,-13, 
  /* [50][0][][] */ -6,-8,62,-46,44,127,-27,-97,19,-10,114,36,63,-31,14,-76, 
  /* [51][0][][] */ 25,29,20,22,31,2,-54,25,58,-6,3,127,8,49,22,-65, 
  /* [52][0][][] */ -16,63,124,4,-6,-37,12,-44,-45,22,11,44,-3,99,-127,-23, 
  /* [53][0][][] */ -9,-28,-36,-127,-33,2,-1,-31,-22,16,20,3,20,-1,32,0, 
  /* [54][0][][] */ -5,1,-14,-25,16,19,-12,12,63,-18,6,-26,-22,127,45,19, 
  /* [55][0][][] */ 7,-33,-44,7,-2,-28,2,-127,9,-58,-20,-9,-35,-82,-40,-25, 
  /* [56][0][][] */ 46,33,34,65,2,-15,5,127,16,-14,-4,-25,61,-15,-47,23, 
  /* [57][0][][] */ 57,-1,127,-28,-79,-71,5,-24,1,1,-99,-6,55,-28,20,27, 
  /* [58][0][][] */ 127,83,5,113,-120,-32,-17,14,19,41,84,-40,-50,-61,-8,-110, 
  /* [59][0][][] */ 125,-51,4,9,-35,-20,-5,16,-37,25,-127,-19,27,-1,-1,25, 
  /* [60][0][][] */ -127,55,-23,10,23,-5,43,50,-3,21,76,1,-21,-13,39,-21, 
  /* [61][0][][] */ -58,42,39,39,10,47,-85,-76,127,-97,14,-21,42,-25,-118,-29, 
  /* [62][0][][] */ -48,-54,-127,88,82,99,-9,78,23,-67,62,2,-80,-29,-84,-12, 
  /* [63][0][][] */ -43,-4,127,-41,-40,-59,24,-48,17,16,-2,16,-8,-48,79,12, 
  /* [64][0][][] */ 19,51,-10,40,42,-27,62,-127,-4,77,-10,-32,-13,-110,4,32, 
  /* [65][0][][] */ -5,7,-3,-13,63,-25,-8,-127,-22,-63,-27,-32,-11,-44,50,-4, 
  /* [66][0][][] */ -127,5,-19,1,-31,20,13,-38,-73,-40,-74,48,63,16,55,74, 
  /* [67][0][][] */ -12,-58,16,127,14,3,-51,38,78,9,-18,-16,-2,-21,-92,-46, 
  /* [68][0][][] */ -2,-5,1,127,-59,-31,-20,-40,-49,-3,25,-49,-28,-50,-32,-67, 
  /* [69][0][][] */ 78,86,6,124,54,-13,85,-97,46,127,49,46,34,-28,34,-39, 
  /* [70][0][][] */ 12,-60,-7,-71,115,1,37,38,63,-43,58,-38,52,127,18,114, 
  /* [71][0][][] */ 7,65,16,108,53,-127,-32,120,46,-101,34,25,3,-51,-78,31, 
  /* [72][0][][] */ -127,-82,-29,54,25,28,-24,13,-48,-16,-104,25,52,1,11,98, 
  /* [73][0][][] */ -9,2,4,76,18,13,16,3,64,32,-3,12,67,127,-80,-33, 
  /* [74][0][][] */ 77,-47,20,-39,-40,-10,31,-27,-67,-6,-127,11,-122,-39,37,57, 
  /* [75][0][][] */ -13,-13,-22,127,-37,23,4,-16,-54,16,-23,-30,3,-54,-20,-24, 
  /* [76][0][][] */ 20,-49,4,44,53,17,-33,-106,-1,-127,6,37,-18,-15,40,-48, 
  /* [77][0][][] */ 127,-20,32,58,-45,-9,-57,-33,65,-12,-44,49,41,5,-60,55, 
  /* [78][0][][] */ -21,-14,62,8,33,-18,-68,43,41,-31,-37,-7,31,127,26,-35, 
  /* [79][0][][] */ -3,25,46,12,42,35,-51,-56,7,-39,64,-26,127,-23,-22,-37, 
  /* [80][0][][] */ -127,-90,-72,111,32,54,58,2,-80,35,-73,14,82,-73,3,32, 
  /* [81][0][][] */ 64,-10,-53,38,91,86,-48,-31,-2,-127,-17,-71,-46,-11,-100,28, 
  /* [82][0][][] */ 122,127,4,59,-122,-13,-62,4,-59,13,109,-40,-56,97,-36,-47, 
  /* [83][0][][] */ 127,54,13,-18,-1,-16,-14,34,52,7,115,-39,-52,-20,-29,-102, 
  /* [84][0][][] */ 0,-82,-77,-51,32,11,9,-127,-40,-45,43,-11,-30,-7,10,1, 
  /* [85][0][][] */ -46,22,-46,-35,-26,0,51,64,0,127,4,-46,5,54,70,-22, 
  /* [86][0][][] */ 65,-11,-2,16,-10,-19,-4,-30,0,-2,-127,2,13,12,-12,22, 
  /* [87][0][][] */ -41,21,12,-18,13,82,-37,38,3,-29,39,11,2,-127,26,-17, 
  /* [88][0][][] */ -21,-38,-95,-38,73,16,-8,-127,29,4,14,-15,-57,-8,31,-24, 
  /* [89][0][][] */ 13,-37,52,-110,23,47,-47,127,96,-56,55,-20,19,54,45,41, 
  /* [90][0][][] */ 4,-10,-30,51,41,8,100,-98,78,127,-36,8,29,-3,0,-25, 
  /* [91][0][][] */ 42,-17,-34,-1,4,-127,-6,10,-7,5,-56,10,30,-1,-15,30, 
  /* [92][0][][] */ 8,-4,127,41,50,24,17,38,-32,38,-51,11,46,68,18,-6, 
  /* [93][0][][] */ 127,-24,-69,-17,-26,-46,43,58,-14,68,-106,-6,25,11,-3,67, 
  /* [94][0][][] */ 26,-11,56,92,123,-27,-4,71,-1,-4,-14,69,-1,127,-31,-84, 
  /* [95][0][][] */ -103,39,26,44,15,40,27,18,19,14,127,-2,-6,40,-23,-33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00057220266899093986, 0.0008382315281778574, 0.00049337424570694566, 0.0029333741404116154, 0.0010044013615697622, 0.00056816433789208531, 0.00076478678965941072, 0.0018513425020501018, 0.0011951549677178264, 0.00026375462766736746, 0.00067930010845884681, 0.0021530173253268003, 0.001384182833135128, 0.00041308379149995744, 0.00056430225959047675, 0.0013400067109614611, 0.00076482840813696384, 0.0006800573319196701, 0.00070862990105524659, 0.0018613947322592139, 0.0014614224201068282, 0.00050927471602335572, 0.00091570353833958507, 0.00075592030771076679, 0.00077216426143422723, 0.0013383846962824464, 0.00080753973452374339, 0.00062319671269506216, 0.0018632595892995596, 0.0012315434869378805, 0.00075122114503756166, 0.00066956260707229376, 0.00035737492726184428, 0.0022235477808862925, 0.0006427168264053762, 0.0014192919479683042, 0.00040309972246177495, 0.0012819489929825068, 0.0014230925589799881, 0.00070332398172467947, 0.0020361484494060278, 0.00055469718063250184, 0.00044923560926690698, 0.00051601848099380732, 0.0014753532595932484, 0.00093062507221475244, 0.00077145418617874384, 0.0007930537685751915, 0.00097704993095248938, 0.00068604317493736744, 0.00140169239602983, 0.0021408963948488235, 0.00046925884089432657, 0.00084535387577489018, 0.00095603778026998043, 0.00047234975500032306, 0.0013173887273296714, 0.00094967411132529378, 0.00082435813965275884, 0.0012100071180611849, 0.00042711460264399648, 0.00054315704619511962, 0.0013550836592912674, 0.0017394853057339787, 0.00057714612921699882, 0.00084465992404147983, 0.0012021772563457489, 0.0011244454653933644, 0.00059272575890645385, 0.0004331996024120599, 0.00063882506219670177, 0.0010895272716879845, 0.0010320600122213364, 0.0011923345737159252, 0.00065971532603725791, 0.0013276636600494385, 0.00032890832517296076, 0.00088706117821857333, 0.00035621493589133024, 0.0015906274784356356, 0.00067535327980294824, 0.0015249020652845502, 0.00066877249628305435, 0.0014805607497692108, 0.00076614064164459705, 0.0010964809916913509, 0.00093145179562270641, 0.0010905546369031072, 0.00051983416778966784, 0.0011652371613308787, 0.00058224168606102467, 0.0015986401122063398, 0.00045909796608611941, 0.00036519259447231889, 0.00077725562732666731, 0.00079668161924928427, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -37410, 3375, 1536, -10051, -2072, -5312, -11876, -44998, 4590, 27700, 33757, -12009, -707, -21573, 44818, -42706, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00061096425633877516, 0.00068903446663171053, 0.0010308764176443219, 0.0009942071046680212, 0.00096327369101345539, 0.001012395485304296, 0.0010283727897331119, 0.00051518529653549194, 0.00064258981728926301, 0.0006891808588989079, 0.00094171473756432533, 0.00044537760550156236, 0.0011713465210050344, 0.0012684378307312727, 0.0004631503252312541, 0.00057123205624520779, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -17,-1,-21,11,16,-5,5,104,-49,15,46,-7,15,-6,-9,13,9,-18,-8,-13,55,2,17,125,-21,91,-3,-14,23,-13,25,-36,-21,55,20,-47,14,44,18,-11,-106,-22,18,39,33,20,-127,-45, 
  /* [1][0][][] */ -36,-15,22,13,-31,10,3,54,-55,-37,6,-49,-20,-21,2,-1,-24,115,-8,15,1,11,-23,-16,31,-45,18,22,-23,-84,-37,20,-24,-3,34,-2,3,-39,0,19,-16,-33,127,16,10,-1,22,-10, 
  /* [2][0][][] */ -25,-7,-15,-37,-2,-65,8,-20,-3,12,13,28,16,15,-10,6,-1,-22,-23,-12,-2,-4,2,-127,-13,76,-17,6,-1,-22,-1,-4,-10,50,11,-3,20,8,26,8,-43,8,-20,-6,-2,-10,13,10, 
  /* [3][0][][] */ -11,36,2,-30,-3,3,9,-1,-13,-2,5,44,-127,8,-6,-3,2,6,-17,7,-30,1,2,13,-4,-10,2,25,-9,17,6,22,7,-1,15,19,-12,24,45,6,7,6,22,-32,5,-6,7,14, 
  /* [4][0][][] */ 33,-34,3,20,25,29,25,-26,-29,4,-11,-15,-1,9,6,20,18,-10,-74,3,-1,8,12,71,5,-26,3,49,8,-74,25,6,9,-40,31,-127,13,33,2,22,-20,24,9,-25,-13,-18,8,3, 
  /* [5][0][][] */ 31,5,-18,63,-2,-8,12,27,5,-3,35,18,4,53,4,2,-23,24,33,10,14,0,5,-25,1,-50,2,-28,-3,-12,5,13,66,-127,1,35,-18,-14,11,6,-99,56,25,-7,-8,-1,-106,-11, 
  /* [6][0][][] */ 27,1,7,7,-15,-5,3,-9,-3,7,0,7,-17,9,4,4,0,-13,127,12,2,8,13,-32,11,7,26,-15,-15,-8,-6,10,-2,-8,30,-36,2,-46,71,13,2,-9,-11,2,-10,-3,4,-10, 
  /* [7][0][][] */ -56,-11,-12,32,-21,85,0,47,2,33,-7,127,82,-10,1,1,-3,-15,-5,-19,-27,-2,-13,63,1,-40,-52,-31,-11,-16,-6,-2,7,-6,-28,10,15,-61,99,-2,20,31,-63,-57,8,-2,6,-8, 
  /* [8][0][][] */ -45,-51,-2,4,-14,4,1,25,0,-75,-1,41,50,-1,21,7,-10,66,-27,12,-40,24,-10,-12,-1,-3,6,43,-4,127,-11,23,0,2,-16,-123,-122,76,30,24,19,-3,123,-21,14,40,25,38, 
  /* [9][0][][] */ -26,17,-3,26,9,-30,-1,-4,63,-39,12,53,-55,1,20,-4,-7,27,-36,-20,45,4,-15,-23,0,9,47,-29,14,8,10,8,5,16,73,-101,-10,-127,-99,10,-37,24,62,9,4,17,-14,-47, 
  /* [10][0][][] */ -18,-9,-32,-127,37,84,12,-14,-5,32,21,13,52,-46,-34,21,35,-33,55,-30,41,-26,42,50,-43,-101,9,-31,48,33,38,-35,-35,-78,18,1,14,-38,1,-37,-36,-66,-16,11,16,26,15,-34, 
  /* [11][0][][] */ -3,65,-2,60,30,-60,-82,-8,0,69,-13,1,-14,61,7,-74,13,37,-1,-12,-61,-106,-4,-1,2,-37,25,-11,39,-38,19,-99,57,-24,-39,-103,84,18,14,-127,-10,77,91,-83,-9,-68,30,37, 
  /* [12][0][][] */ 127,-1,-14,6,2,20,0,101,18,-3,-61,-24,1,14,-20,-3,-8,13,-10,-4,7,-4,2,16,-6,18,-2,9,2,9,-9,8,-2,-73,-12,8,-13,-16,-33,6,-20,-80,7,-125,-50,-10,75,-7, 
  /* [13][0][][] */ 10,2,0,0,5,-8,-1,-1,-2,11,3,22,-3,2,5,-2,9,4,9,5,14,-11,5,-5,2,-1,16,127,14,-5,5,-2,6,-3,-41,25,11,-4,4,-17,-16,-2,-1,6,-1,-1,-6,-11, 
  /* [14][0][][] */ 79,-26,44,-73,52,24,37,-114,-65,-61,-1,124,-68,-2,69,10,60,16,-60,74,19,17,84,-11,16,63,-35,-127,24,-43,66,51,-9,74,-119,-53,-32,42,81,2,-31,6,55,1,4,0,15,-41, 
  /* [15][0][][] */ -6,-57,-75,-32,60,22,78,-52,-8,9,-15,-40,79,30,-85,63,56,46,79,-91,-114,-15,54,-10,-100,51,33,55,47,49,48,-56,17,68,105,127,-26,-118,-9,-35,106,63,117,-57,-14,-36,-20,75, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0259659793227911, 0.029283963143825531, 0.04381224513053894, 0.042253799736499786, 0.040939129889011383, 0.04302680492401123, 0.043705843389034271, 0.021895375102758408, 0.027310067787766457, 0.029290186241269112, 0.040022876113653183, 0.018928548321127892, 0.049782223999500275, 0.053908608853816986, 0.019683888182044029, 0.024277361109852791, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 5029, 31985, -1024, 51510, 4602, 128592, -2350, 56694, 5486, 29991, 24366, 316, 4605, 26363, -1553, -1832, -1016, 1633, 3698, -2638, 1633, -3478, -705, -19959, -3965, 49703, 126372, 101755, 2984, 3133, -2156, 224, 22800, 1300, 22517, -2103, 38723, 2167, 61749, 1052, 1323, 63087, 532, 7464, 44015, -289, 5984, 48740, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.7367880546953529e-05, 3.4850701922550797e-05, 0.00015953456750139594, 4.6711633331142366e-05, 0.00015943801554385573, 6.4978084992617369e-05, 0.00016804215556476265, 9.7632124379742891e-05, 7.4384966865181923e-05, 4.202934360364452e-05, 5.6394565035589039e-05, 0.00010088247654493898, 4.0514991269446909e-05, 3.7695299397455528e-05, 0.00014611105143558234, 0.00021180626936256886, 0.000172337910044007, 6.270339508773759e-05, 0.00010627068695612252, 0.00013241113629192114, 8.1978963862638921e-05, 0.00022944988450035453, 9.3849652330391109e-05, 0.00012695410987362266, 0.0001059108690242283, 8.5155879787635058e-05, 2.6940544557874091e-05, 6.8126879341434687e-05, 0.00013339611177798361, 0.00011396308400435373, 0.00011288995301583782, 0.00014639047731179744, 5.8656911278376356e-05, 0.00013430634862743318, 3.3659820473985747e-05, 5.4927109886193648e-05, 0.0001480050414102152, 8.9983230282086879e-05, 8.9829074568115175e-05, 0.00010777565330499783, 0.0001072463855962269, 9.1028559836558998e-05, 8.3360035205259919e-05, 7.1133174060378224e-05, 2.95049867418129e-05, 0.00016890258120838553, 8.8737651822157204e-05, 3.1579791539115831e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 67,-94,96,71,54,-35,107,-64,62,-87,-78,49,53,-39,-73,-89,101,83,50,76,66,-73,-83,49,-33,-41,-64,-65,-67,61,-63,-114,-14,40,70,66,-66,51,-48,-21,51,-76,59,63,-92,11,76,-32, 79,-99,127,88,-76,-69,-56,-84,99,-100,-62,74,80,-105,-95,91,-37,100,81,127,86,-114,52,70,-51,-79,-69,-80,55,79,-32,-127,-87,79,82,86,-84,80,-79,-15,76,-97,82,90,-74,-127,95,-99, 34,-51,69,38,19,-42,-47,-40,42,-29,5,35,31,-76,-55,-1,-52,41,35,70,32,-54,32,27,-29,-48,-44,-23,32,32,87,-91,-85,45,35,36,-32,37,-36,-9,41,-40,34,43,-5,-9,38,-71, 
  /* [0][1][][] */ 92,-114,-41,95,55,-83,127,-90,90,-111,-72,82,86,-109,-13,-127,127,108,75,-38,83,108,-127,72,72,-75,-94,-97,-127,86,-69,-9,-85,71,107,97,-86,78,-80,88,83,-102,88,91,-90,108,94,-92, 127,-127,-65,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-22,98,-64,127,127,-48,127,127,70,127,127,-127,-127,-127,52,127,-28,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 64,-80,-32,68,37,-64,-49,-60,55,-43,-60,60,49,-51,-16,12,-62,52,58,-30,57,65,51,63,64,-66,-61,-44,36,55,127,14,-63,70,48,50,-50,60,-60,57,62,-58,54,63,-61,-68,60,-58, 
  /* [0][2][][] */ 45,-53,-48,49,27,-54,63,-42,39,-71,-5,41,57,-71,83,-79,74,50,34,-28,27,-10,-77,29,-24,-47,-49,-49,-74,32,-41,90,-72,36,47,44,-28,37,-43,-86,48,-50,39,46,-21,16,40,-73, 73,-77,-49,83,-57,-65,-72,-65,52,-77,-65,60,74,-46,127,33,-43,62,60,-42,52,-18,41,66,-49,-69,-80,-61,32,59,-23,120,-55,65,56,58,-50,61,-67,-102,69,-69,59,62,-87,51,65,-51, 41,-43,-26,49,28,-21,-18,-33,16,-26,-50,30,32,7,68,25,-34,25,28,-30,27,0,39,41,-27,-30,-48,-24,34,33,62,68,-1,35,15,24,-23,30,-30,-53,28,-32,24,28,-64,10,33,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028631347231566906, 0.0014811548171564937, 0.0067802187986671925, 0.0019852444529533386, 0.0067761153914034367, 0.002761568408459425, 0.0071417912840843201, 0.0041493652388453484, 0.0031613609753549099, 0.0017862470122054219, 0.0023967688903212547, 0.0042875050567090511, 0.0017218870343640447, 0.0016020501498132944, 0.0062097194604575634, 0.0090017663314938545, 0.0073243607766926289, 0.0026648940984159708, 0.0045165042392909527, 0.005627472884953022, 0.0034841059241443872, 0.0097516197711229324, 0.0039886101149022579, 0.0053955498151481152, 0.0045012119226157665, 0.0036191248800605536, 0.0011449730955064297, 0.002895392244681716, 0.0056693349033594131, 0.0048434310592710972, 0.0047978227958083153, 0.0062215952202677727, 0.0024929186329245567, 0.0057080197148025036, 0.0014305423246696591, 0.0023344021756201982, 0.0062902141362428665, 0.0038242873270064592, 0.003817735705524683, 0.0045804651454091072, 0.0045579713769257069, 0.0038687137421220541, 0.0035428013652563095, 0.0030231599230319262, 0.0012539619347080588, 0.0071783596649765968, 0.0037713502533733845, 0.0013421411858871579, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 549, 698, 2126, 441, 8446, 13855, 2098, -131, -625, -490, 905, 982, 2475, 988, 22760, 2513, 1378, -1077, -376, 2882, -1585, 8678, 9031, 8342, 4485, 275, 3161, 3147, 7097, -433, 8696, 4427, 540, -190, 4471, 2791, -1642, 323, -525, 4315, 766, -410, -711, -93, 821, 3118, 515, 858, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00045654084533452988, 0.00098755944054573774, 0.0002844315895345062, 0.00035744966589845717, 0.00026533353957347572, 0.00029249140061438084, 0.00052387599134817719, 0.00029668235220015049, 0.00047062695375643671, 0.00086919713066890836, 0.0011300460901111364, 0.00032173588988371193, 0.00048931874334812164, 0.00077796104596927762, 0.00015891004295554012, 0.00048709908151067793, 0.00033247310784645379, 0.00038583076093345881, 0.00025078823091462255, 0.00031534524168819189, 0.0003944522759411484, 0.00029493999318219721, 0.00041095094638876617, 0.00018894116510637105, 0.00035506722633726895, 0.00031903991475701332, 0.002196247223764658, 0.00058201956562697887, 0.00024882113211788237, 0.00050277903210371733, 0.0003046536585316062, 0.00027221592608839273, 0.00077160238288342953, 0.00029064362752251327, 0.00082223810022696853, 0.00065783201716840267, 0.00083852652460336685, 0.00035246447077952325, 0.00028609056607820094, 0.00042682336061261594, 0.00019989031716249883, 0.00030748586868867278, 0.00040092231938615441, 0.00029691791860386729, 0.0023790078703314066, 0.00045237952144816518, 0.00040639616781845689, 0.0013961123768240213, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-1,-2,72,-35,39,22,-26, 
  /* [1][0][][] */ 37,73,35,25,19,-37,106,127, 
  /* [2][0][][] */ -31,8,12,9,-127,-22,19,-2, 
  /* [3][0][][] */ 104,-10,-19,-127,-114,12,26,-20, 
  /* [4][0][][] */ -127,31,-26,-13,55,-15,50,36, 
  /* [5][0][][] */ -106,-25,28,-14,-127,15,4,80, 
  /* [6][0][][] */ 0,-127,10,-10,8,-2,3,35, 
  /* [7][0][][] */ -61,0,8,99,127,-35,-39,2, 
  /* [8][0][][] */ 81,9,2,-127,1,-25,-51,-35, 
  /* [9][0][][] */ 8,-127,11,-7,6,89,-51,64, 
  /* [10][0][][] */ -101,7,-3,22,-127,71,63,-23, 
  /* [11][0][][] */ 127,11,33,13,-51,-42,-22,-126, 
  /* [12][0][][] */ -6,13,33,3,13,-69,127,67, 
  /* [13][0][][] */ 62,-42,-8,-4,116,127,117,-39, 
  /* [14][0][][] */ 127,71,-14,6,-95,-30,-19,-32, 
  /* [15][0][][] */ -16,-127,12,-21,-7,11,7,27, 
  /* [16][0][][] */ -58,-17,-4,15,-127,9,21,8, 
  /* [17][0][][] */ -26,95,-123,1,7,-127,111,-79, 
  /* [18][0][][] */ 127,-32,-38,13,-67,20,12,110, 
  /* [19][0][][] */ 127,-74,-16,-3,69,11,36,15, 
  /* [20][0][][] */ 127,28,-25,124,-11,25,5,-49, 
  /* [21][0][][] */ -14,29,-59,7,-41,95,-127,-83, 
  /* [22][0][][] */ -127,25,23,-13,-29,6,-52,-32, 
  /* [23][0][][] */ -38,-56,-2,19,-127,60,73,-17, 
  /* [24][0][][] */ 127,-4,-24,-9,-85,-1,20,21, 
  /* [25][0][][] */ 27,-16,-6,-26,127,44,55,-30, 
  /* [26][0][][] */ -1,-103,13,-39,12,-127,87,-60, 
  /* [27][0][][] */ -18,-127,29,-15,-7,-53,31,-6, 
  /* [28][0][][] */ -87,24,-32,24,-15,-26,127,87, 
  /* [29][0][][] */ -13,52,9,8,1,40,-108,-127, 
  /* [30][0][][] */ 127,-30,10,-11,-88,4,-46,-32, 
  /* [31][0][][] */ -23,8,70,-22,3,-127,112,51, 
  /* [32][0][][] */ -70,24,-2,8,-127,-109,-110,42, 
  /* [33][0][][] */ -26,7,-1,21,-127,-50,-48,21, 
  /* [34][0][][] */ 10,-127,47,-15,-5,82,-74,64, 
  /* [35][0][][] */ -24,-47,-127,-11,-5,-73,45,-54, 
  /* [36][0][][] */ 2,127,64,10,-13,8,-17,-37, 
  /* [37][0][][] */ -127,39,36,-19,66,-23,-13,-119, 
  /* [38][0][][] */ -127,-12,-34,-13,48,28,26,92, 
  /* [39][0][][] */ 12,-34,58,2,2,-89,127,100, 
  /* [40][0][][] */ -29,-13,-7,-43,-127,118,114,-35, 
  /* [41][0][][] */ -127,54,17,-70,-81,-80,-81,35, 
  /* [42][0][][] */ -52,-127,-104,9,-10,57,-109,-68, 
  /* [43][0][][] */ -66,7,-18,-127,99,63,67,2, 
  /* [44][0][][] */ 127,-9,25,-87,27,-32,-5,33, 
  /* [45][0][][] */ -21,-127,-11,-25,-3,-70,80,23, 
  /* [46][0][][] */ 109,-12,-10,-17,127,-25,-28,6, 
  /* [47][0][][] */ 127,3,2,99,-6,19,13,-48, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00073376856744289398, 0.0015872403746470809, 0.00045714850421063602, 0.00057450571330264211, 0.0004264534218236804, 0.00047010253183543682, 0.00084199197590351105, 0.00047683835146017373, 0.00075640826253220439, 0.0013970043510198593, 0.0018162500346079469, 0.00051710527623072267, 0.00078645040048286319, 0.001250366447493434, 0.00025540584465488791, 0.00078288285294547677, 0.00053436250891536474, 0.0006201208452694118, 0.00040307571180164814, 0.00050683401059359312, 0.00063397764461115003, 0.00047403798089362681, 0.00066049490123987198, 0.00030367291765287519, 0.00057067658053711057, 0.00051277223974466324, 0.0035298860166221857, 0.00093544239643961191, 0.0003999141335953027, 0.00080808426719158888, 0.00048965011956170201, 0.00043751503108069301, 0.001240146579220891, 0.00046713268966414034, 0.0013215300859883428, 0.0010572908213362098, 0.001347709447145462, 0.0005664933705702424, 0.00045981488074176013, 0.00068600557278841734, 0.00032127078156918287, 0.0004942021332681179, 0.00064437650144100189, 0.00047721699229441583, 0.0038236256223171949, 0.00072708033258095384, 0.00065317429834976792, 0.0022438811138272285, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -46133, 22975, -13129, -15470, 21001, 605, 28946, 46211, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00046985031804069877, 0.0006874960963614285, 0.0015177018940448761, 0.0017697716830298305, 0.00089533202117308974, 0.00060064689023420215, 0.00079224631190299988, 0.0010170057648792863, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-12,-44,16,10,-18,7,21,-110,126,-42,115,112,0,83,-5,-11,-32,0,10,9,6,-22,-34,27,-86,10,59,-12,8,20,-27,-10,-79,127,20,-8,-2,3,-23,113,-3,51,-23,-24,21,7,-14, 
  /* [1][0][][] */ 0,32,127,7,1,-24,6,-75,30,-4,20,9,-28,9,-5,-110,21,-57,2,2,-26,30,21,-35,-12,-7,5,0,6,-1,22,-6,5,13,12,19,-17,-30,65,-63,16,48,-4,27,-19,9,21,-3, 
  /* [2][0][][] */ 5,-47,14,-43,32,22,-4,-34,10,-6,-3,16,-6,59,3,0,-32,127,-20,-34,-16,17,-41,-6,115,-1,-3,-5,-26,-6,4,-44,-5,-14,-4,15,-6,-8,-14,9,15,-24,-14,-2,8,27,-25,-40, 
  /* [3][0][][] */ -6,-76,0,10,-1,-6,-12,0,-5,-11,14,20,14,-10,46,4,-12,-19,10,14,-4,18,-27,4,2,46,6,13,-7,6,127,0,11,9,-6,5,-23,-13,-6,17,-11,6,-4,25,-7,-2,1,28, 
  /* [4][0][][] */ -93,9,-5,-2,4,-34,9,8,40,-42,15,-22,-28,5,-4,-12,-1,0,-1,29,18,-23,16,6,-4,45,3,102,-1,9,-4,-27,2,-127,-34,7,0,-4,9,-5,-49,-2,-4,14,-49,6,11,3, 
  /* [5][0][][] */ -30,30,14,5,-47,14,-10,51,21,-1,4,15,-2,-50,8,25,-3,-93,18,-5,48,-46,-1,44,13,2,-79,-43,-48,-32,21,-6,-4,-69,-7,-68,56,6,-41,12,27,-35,8,-6,127,-15,-42,-6, 
  /* [6][0][][] */ -34,-20,-10,1,33,-31,-3,-29,-18,3,39,-21,-12,37,-1,-60,-3,3,4,-24,-42,54,1,-69,-2,-4,-45,-63,31,39,-18,3,5,-67,-11,59,-64,-42,9,-58,-11,11,12,47,127,-32,39,9, 
  /* [7][0][][] */ 8,28,-79,25,-24,12,-3,56,0,-4,66,-38,10,-30,-6,-4,-20,-127,44,-47,60,43,20,-55,17,-19,29,10,-16,25,-21,0,-6,32,-4,-34,-5,-50,-45,-61,-16,-34,32,63,-28,-26,-7,0, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019968638196587563, 0.029218582436442375, 0.064502328634262085, 0.07521529495716095, 0.038051608949899673, 0.025527492165565491, 0.033670466393232346, 0.043222744017839432, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52022, -199, 9577, 69, 5049, -3910, 1355, 24316, 1332, 32348, -2805, 22004, -6372, -1060, 26175, 4277, 118, 16376, 35617, 12554, 194, -237, -898, 11326, -7945, 23552, 46941, 32888, 3582, 331, -1174, 789, 842, 14950, -6755, 14914, -11368, 23074, -22714, 121002, 16652, 22476, 10909, -1455, 16216, 3198, 1252, 118, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0003101725596934557, 0.00029520181124098599, 0.00017921171092893928, 0.00025446209474466741, 0.00016663876886013895, 9.207220864482224e-05, 0.00083364511374384165, 0.00014365508104674518, 0.00015100231394171715, 0.00015100969176273793, 0.00012134840653743595, 0.00019527993572410196, 0.00028934114379808307, 0.00022875673312228173, 9.6225718152709305e-05, 0.0003541775222402066, 0.00021527806529775262, 0.00023958766541909426, 6.9415480538737029e-05, 0.00015748340229038149, 0.00020536468946374953, 0.00024283035600092262, 0.00021017018298152834, 0.00018213936709798872, 0.00015574882854707539, 0.00015751010505482554, 0.00061107386136427522, 0.0001002399149001576, 0.00018593095592223108, 0.0023664326872676611, 9.9322540336288512e-05, 0.00020306833903305233, 0.00096766906790435314, 0.00018510581867303699, 0.00019137516210321337, 0.00016844029596541077, 0.000386018306016922, 0.00011422034731367603, 0.00027311447774991393, 2.0499823222053237e-05, 0.00019501210772432387, 6.3146304455585778e-05, 0.00014458573423326015, 0.00019312654330860823, 0.00014496792573481798, 0.00011482018453534693, 0.00019426491053309292, 0.00013861134357284755, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,108,5,80,-1,27,15,8,9,7,-7,-10,-45,8,-1,8,-23,-113,-7,-22,127,-8,-4,7,-6,9,-4,3,14,99,21,29,38,-28,1,35,-2,2,18,-69,-8,-9,17,2,-7,-10, 127,9,15,-127,28,85,11,10,122,127,6,43,-50,-25,5,7,127,-56,-60,-58,-101,26,-108,16,16,72,-32,-83,24,20,10,-122,6,-60,127,10,-39,-47,-5,115,-79,-98,-29,2,-35,-9,-127,23, -32,-3,7,15,0,63,5,17,26,8,-14,31,-14,-4,15,3,-103,29,-3,75,-31,-11,-17,-5,-5,-58,-3,30,-16,3,4,-21,8,-23,16,-19,0,47,41,-12,50,37,-15,11,-43,2,-1,-6, 
  /* [0][1][][] */ 125,7,1,-98,14,-27,35,-17,8,8,-12,54,-6,-2,18,-33,1,-49,-60,-86,10,-73,-122,-17,4,99,-15,-127,-7,33,11,-106,17,-51,-2,127,-3,59,-41,42,-63,-127,39,-89,-45,-14,-12,-5, 26,-127,-127,114,-127,-127,-127,-127,-127,-98,127,-127,127,127,35,-127,-82,127,127,-108,127,127,112,127,127,-127,-127,30,-127,-127,95,127,-127,127,-29,-41,127,-127,127,127,127,-81,127,127,127,-120,103,106, 53,5,48,-14,6,-62,45,18,-25,14,-105,-8,0,-41,127,4,63,-65,-71,83,14,-45,12,-32,1,8,-37,70,21,39,1,4,33,-43,9,66,-4,64,67,-9,-81,7,-83,-32,27,-17,-11,5, 
  /* [0][2][][] */ -53,-6,25,-17,8,33,-37,22,7,-25,11,33,5,-6,-40,18,6,22,-14,105,6,-32,-15,-12,-4,23,-1,52,-9,3,47,-30,-18,-42,-32,-39,-1,31,10,-21,9,-5,42,-38,-36,19,-10,18, 68,126,75,21,17,-21,124,35,18,-4,43,27,-6,-1,-91,25,-58,-56,-36,121,-38,49,13,19,30,-63,-41,31,78,1,127,23,86,-25,7,-36,-25,-17,-11,119,-28,-14,-40,44,21,-31,7,-127, -42,-4,6,-3,6,-7,-61,7,-19,-11,-41,-40,20,-10,-9,11,33,24,-9,-127,23,-10,6,-8,-7,10,-11,-54,-15,8,6,9,-20,88,-37,-23,-4,36,27,-60,4,7,-37,6,-42,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013182333670556545, 0.012546076439321041, 0.0076164975762367249, 0.010814638808369637, 0.0070821475237607956, 0.0039130686782300472, 0.035429917275905609, 0.006105340551584959, 0.0064175981096923351, 0.0064179119653999805, 0.005157307256013155, 0.0082993973046541214, 0.01229699794203043, 0.0097221611067652702, 0.0040895929560065269, 0.015052544884383678, 0.009149317629635334, 0.010182475671172142, 0.0029501579701900482, 0.0066930442117154598, 0.0087279994040727615, 0.010320289991796017, 0.0089322328567504883, 0.0077409227378666401, 0.0066193249076604843, 0.0066941794939339161, 0.025970639660954475, 0.0042601963505148888, 0.0079020652920007706, 0.10057338327169418, 0.0042212079279124737, 0.0086304042488336563, 0.041125934571027756, 0.0078669972717761993, 0.0081334440037608147, 0.0071587124839425087, 0.016405778005719185, 0.0048543647862970829, 0.011607365682721138, 0.00087124248966574669, 0.008288014680147171, 0.0026837177574634552, 0.0061448938213288784, 0.0082078780978918076, 0.006161137018352747, 0.0048798578791320324, 0.0082562584429979324, 0.0058909822255373001, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 51483, 6493, 5385, 6745, 1574, 8661, -1656, -201, 788, 1906, 2884, 255, 1637, -762, 576, -1735, 3875, 8858, -263, 20930, 3683, 2539, 7250, -400, 3620, 4963, 26373, 8872, -67, -2082, 104, 1940, -1840, 7450, 2273, 6913, 6129, 3730, 18813, 1685, -632, 2422, 993, 3531, 4546, 1880, -1168, 2213, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.4061030065640807e-05, 0.00035133949131704867, 0.00029440547223202884, 0.00047783248010091484, 0.0014148954069241881, 0.00058602174976840615, 0.0011484510032460093, 0.0013399554882198572, 0.00074077490717172623, 0.00070220784982666373, 0.00078653462696820498, 0.00052701606182381511, 0.00060905556892976165, 0.00056921126088127494, 0.00072614761302247643, 0.0020912380423396826, 0.00041712046368047595, 0.00047794918646104634, 0.0018827785970643163, 0.00012799573596566916, 0.00033835411886684597, 0.00039868414751254022, 0.00054190971422940493, 0.0012430658098310232, 0.00033969595097005367, 0.00023956672521308064, 0.0001553142792545259, 0.00041512076859362423, 0.00080792338121682405, 0.0012647092808037996, 0.00063670944655314088, 0.00043700230889953673, 0.0010848212987184525, 0.00029165262822061777, 0.00044680992141366005, 0.00027387391310185194, 0.0006021235603839159, 0.00036969740176573396, 0.00012439889542292804, 0.0026847429107874632, 0.00090599164832383394, 0.0011463242117315531, 0.00049653224414214492, 0.00042564931209199131, 0.00026295808493159711, 0.00058663444360718131, 0.00098482787143439054, 0.0012137865414842963, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 69,40,-2,-3,127,10,-49,-35, 
  /* [1][0][][] */ 6,3,-5,127,6,-12,0,14, 
  /* [2][0][][] */ 18,-127,-18,38,6,-58,65,14, 
  /* [3][0][][] */ 127,-26,-4,24,-16,-47,11,13, 
  /* [4][0][][] */ 10,-56,127,-10,-22,-50,15,-93, 
  /* [5][0][][] */ 66,24,1,-1,127,2,-11,-7, 
  /* [6][0][][] */ -3,98,-29,127,44,63,-69,-67, 
  /* [7][0][][] */ -5,127,-2,3,1,-18,20,2, 
  /* [8][0][][] */ 127,45,-3,11,-47,-8,8,-39, 
  /* [9][0][][] */ -127,7,8,20,58,17,-13,-8, 
  /* [10][0][][] */ -93,13,19,127,40,46,-17,-27, 
  /* [11][0][][] */ -127,7,3,-73,53,-3,-28,-43, 
  /* [12][0][][] */ 127,26,-5,15,-54,2,27,-48, 
  /* [13][0][][] */ 1,74,-127,-24,3,110,-57,78, 
  /* [14][0][][] */ -58,-19,-13,127,23,15,-1,-23, 
  /* [15][0][][] */ -2,127,1,0,1,-16,13,-51, 
  /* [16][0][][] */ -24,-108,-21,4,-5,-124,127,-35, 
  /* [17][0][][] */ 18,127,-3,-13,2,75,-77,-17, 
  /* [18][0][][] */ 5,47,-127,-3,22,58,-58,57, 
  /* [19][0][][] */ -91,25,14,-5,-127,8,27,22, 
  /* [20][0][][] */ -127,-32,5,11,73,-27,32,15, 
  /* [21][0][][] */ -75,0,4,17,-127,-7,9,3, 
  /* [22][0][][] */ -127,-15,-2,-9,96,-17,40,43, 
  /* [23][0][][] */ -20,-19,-11,-5,5,75,-127,-92, 
  /* [24][0][][] */ -5,41,-127,3,11,51,-20,73, 
  /* [25][0][][] */ 105,-37,-2,127,-83,-11,13,-56, 
  /* [26][0][][] */ -3,-20,-6,-2,-10,112,127,-27, 
  /* [27][0][][] */ 59,-1,-5,10,127,36,38,-28, 
  /* [28][0][][] */ -7,127,-62,8,11,106,-17,126, 
  /* [29][0][][] */ -14,11,-3,-3,-6,86,-127,-84, 
  /* [30][0][][] */ 4,-2,4,-127,-5,-5,-6,-18, 
  /* [31][0][][] */ -79,12,-4,8,-127,-1,6,1, 
  /* [32][0][][] */ -21,38,12,-127,-6,33,-80,-103, 
  /* [33][0][][] */ -56,-8,-6,-1,-127,41,35,2, 
  /* [34][0][][] */ -127,64,1,25,33,-37,38,23, 
  /* [35][0][][] */ -21,127,-24,6,-2,-117,92,-33, 
  /* [36][0][][] */ 1,54,11,-31,-8,98,-127,-37, 
  /* [37][0][][] */ 44,-64,-30,27,33,-127,109,-32, 
  /* [38][0][][] */ 12,-127,7,-11,15,69,-66,65, 
  /* [39][0][][] */ 7,-127,-15,-8,-1,-13,-57,-103, 
  /* [40][0][][] */ 110,44,-7,-17,-29,50,-127,-90, 
  /* [41][0][][] */ 7,-127,29,5,-10,85,-70,126, 
  /* [42][0][][] */ 52,-18,14,-127,-64,14,14,-35, 
  /* [43][0][][] */ -100,-16,2,-127,63,10,-19,-15, 
  /* [44][0][][] */ 10,-29,-7,5,-19,116,127,-23, 
  /* [45][0][][] */ -127,-39,-3,-5,14,11,10,-17, 
  /* [46][0][][] */ 5,86,127,1,-7,25,24,23, 
  /* [47][0][][] */ -2,0,6,127,10,0,-1,2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00017387239495292306, 0.00072671298403292894, 0.00060895027127116919, 0.00098835187964141369, 0.0029265792109072208, 0.001212131348438561, 0.0023754637222737074, 0.0027715729083865881, 0.0015322237741202116, 0.0014524514554068446, 0.0016268735053017735, 0.0010900835040956736, 0.0012597746681421995, 0.0011773604201152921, 0.0015019685961306095, 0.0043255309574306011, 0.00086277478840202093, 0.00098859332501888275, 0.003894351888448, 0.00026474724290892482, 0.00069985393201932311, 0.00082464097067713737, 0.0011208896758034825, 0.0025711655616760254, 0.00070262938970699906, 0.00049552140990272164, 0.00032125308644026518, 0.00085863861022517085, 0.0016711141215637326, 0.0026159330736845732, 0.0013169740559533238, 0.00090389850083738565, 0.0022438515443354845, 0.00060325622325763106, 0.00092418462736532092, 0.00056648266036063433, 0.0012454363750293851, 0.00076468457700684667, 0.00025730751804076135, 0.0055531403049826622, 0.0018739592051133513, 0.0023710646200925112, 0.0010270306374877691, 0.00088041590061038733, 0.0005439042579382658, 0.001213398645631969, 0.0020370245911180973, 0.002510604215785861, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -2085, -23398, 24340, 24728, 4722, 1262, 37470, 8791, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0014522883575409651, 0.00071632611798122525, 0.0011866608401760459, 0.0012911894591525197, 0.0011158869601786137, 0.0012362992856651545, 0.0008531272760592401, 0.00063357094768434763, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -15,-5,9,-98,12,28,7,9,3,3,-2,-3,101,0,-1,7,0,-8,-2,2,81,-2,-3,4,33,36,11,12,10,5,8,-127,9,5,-2,2,-28,1,-16,33,10,-27,-6,5,2,-5,4,5, 
  /* [1][0][][] */ -43,-11,0,-7,49,27,-28,76,23,3,-34,-14,10,0,16,38,0,40,23,-56,-2,23,127,21,-28,-1,51,7,22,-1,20,-14,15,-11,-5,-22,2,-48,10,3,-8,-11,-77,-7,-38,7,-49,-98, 
  /* [2][0][][] */ -57,17,-9,9,40,-8,26,23,-7,55,12,-3,2,0,4,55,0,16,-127,20,-8,15,8,-20,-26,-3,35,1,10,30,22,0,7,-8,-13,-13,14,5,7,0,38,-1,-33,1,24,-57,21,14, 
  /* [3][0][][] */ 1,-4,-3,9,-10,29,4,-4,68,14,-1,-5,28,0,-30,-8,0,-6,-12,2,-1,-7,7,-16,-10,-11,-10,-4,-9,-4,0,-6,-53,44,-60,3,5,-1,-2,-127,3,8,2,-52,-2,0,0,7, 
  /* [4][0][][] */ 0,-8,80,32,1,-18,-1,0,6,-2,1,-11,-80,0,-12,2,0,10,5,1,72,5,2,-3,-13,34,-3,43,-5,-6,2,100,6,6,-2,-1,16,-13,-16,-16,-5,-127,4,3,-4,-6,0,3, 
  /* [5][0][][] */ -7,43,3,-8,3,45,24,10,-20,29,6,49,25,0,-127,-2,0,18,-36,15,-8,10,-12,39,-20,-1,28,-3,-17,24,22,-17,52,27,-36,-4,7,16,-49,19,21,-14,-10,27,23,57,24,24, 
  /* [6][0][][] */ -26,-51,-1,7,39,-44,-21,6,28,-25,-5,90,-3,0,-127,41,0,-10,46,-16,-8,3,24,-34,32,-2,-5,-17,47,-13,-14,-3,96,-32,26,3,-4,-6,-62,-25,-13,-11,-4,-25,-19,-86,-17,-26, 
  /* [7][0][][] */ -116,-23,-16,7,127,28,70,23,11,10,35,-29,-25,0,89,116,0,15,-3,67,-16,-1,-31,44,22,6,48,1,50,68,60,-4,-4,-20,-21,-25,9,28,33,35,80,7,-32,-8,66,2,70,83, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.061722252517938614, 0.030443860217928886, 0.05043308436870575, 0.054875552654266357, 0.047425195574760437, 0.05254271999001503, 0.036257907748222351, 0.026926765218377113, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 65576, 62194, 61932, 42501, 437, 13539, 1861, 25925, 26375, 28512, 28545, 10115, -46539, -127, 33959, 1143, -204, 41113, 2344, 2696, -16131, 10452, 53711, 38286, -21799, 37271, 37458, 18525, -2704, 16166, -7373, -50869, 9872, 102591, 28900, 1458, 54922, -245, 138452, -22227, 15263, -26663, 3721, 96714, -1206, 62820, 875, -22802, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.0037778136320412e-05, 6.2718012486584485e-05, 0.00013424514327198267, 0.00010603789996821433, 0.00021119517623446882, 0.00017129394109360874, 0.00013916245370637625, 6.8428125814534724e-05, 8.649843221064657e-05, 2.4893768568290398e-05, 7.0406895247288048e-05, 2.8537153411889449e-05, 0.00017399140051566064, 0.005541567225009203, 7.5524185376707464e-05, 0.00028233396005816758, 0.0027484172023832798, 1.8687540432438254e-05, 7.7503995271399617e-05, 0.0001633024075999856, 0.00012493161193560809, 0.00013368642248678952, 0.00010736031254054978, 3.2419171475339681e-05, 9.8923395853489637e-05, 7.0865666202735156e-05, 2.9919834560132585e-05, 4.1775805584620684e-05, 0.00033189257374033332, 5.9451245761010796e-05, 5.6166521972045302e-05, 0.00019448755483608693, 0.00024624628713354468, 8.3838185673812404e-06, 8.8724584202282131e-05, 0.00019804092880804092, 1.48380859172903e-05, 0.00041736350976862013, 3.3167463698191568e-05, 8.0940044426824898e-05, 6.3336105085909367e-05, 0.00019107910338789225, 0.00011296409502392635, 8.6952713900245726e-06, 0.00015896583499852568, 9.5425610197708011e-05, 0.00020269495144020766, 0.00011876039206981659, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-22,-8,-17,7,-39,-78,-67,-25,-50,7,64,35,-71,114,-43,-113,-86,37,-7,0,-75,-111,-79,-34,-124,-63,-22,71,15,95,26,-127,-88,-8,54,18,48,-127,79,-76,-13,105,-107,-3,-34,-88,108, 76,12,-29,-28,57,-127,-127,-80,61,-76,-114,109,37,-82,-1,62,-52,-115,59,6,11,-119,-127,-71,-3,-127,-120,-44,-53,21,-57,53,29,-127,64,84,14,72,-92,127,-127,7,125,-127,2,-22,-127,94, -31,43,6,-4,-66,-108,-59,-17,87,-7,-127,38,7,-71,-101,-11,-127,-24,27,11,-15,-79,-36,-24,-11,-32,-59,-16,-8,18,-24,9,108,-87,71,30,14,35,-4,16,-79,4,6,-78,-17,6,-55,15, 
  /* [0][1][][] */ -84,-127,-44,-45,-11,55,100,-105,-25,-109,-22,110,91,-64,28,-98,-121,-93,91,-77,42,-89,-102,-127,43,-115,-77,-37,127,-60,127,84,-44,-85,-15,85,-36,-77,-107,90,42,59,105,-105,-91,-117,82,121, 127,-82,-127,-127,127,41,95,-127,99,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-119,127,-96,-127,-127,-119,-127,-72,127,28,-111,127,127,-68,-127,-96,90,61,127,127,-114,-112,-127,124,127, -52,31,-61,-85,-121,-22,31,-39,127,-20,-75,36,55,-70,-25,-44,-37,-29,55,-72,57,-83,-38,-23,47,-5,-46,-60,15,-90,-36,20,29,-99,120,25,-36,-63,2,-14,37,53,9,-74,-58,-37,65,36, 
  /* [0][2][][] */ -60,-107,-32,-33,-1,35,-5,-35,-37,-59,-17,58,77,-127,-127,-65,-43,-18,65,75,51,-34,-14,-61,33,-54,-12,-59,76,29,76,62,108,-25,-39,-9,-96,35,-18,30,9,37,15,-55,96,-78,3,31, 88,-72,-87,-84,81,19,7,-46,47,-71,-33,54,83,-26,16,93,-24,-31,77,117,80,-54,-20,-58,93,-68,-19,-98,-50,40,-46,112,-18,-47,66,5,-127,50,-15,-1,11,32,14,-66,127,-100,-12,40, -27,29,-41,-36,-81,-18,22,-11,58,-5,-14,31,31,-43,111,-30,-93,-4,31,59,74,-29,-2,-2,42,0,-4,-65,-14,29,-20,40,-91,-42,67,2,-20,21,27,-39,7,35,-5,-14,63,-35,-4,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038266056217253208, 0.002665515523403883, 0.0057054185308516026, 0.0045066107995808125, 0.0089757945388555527, 0.0072799925692379475, 0.0059144040569663048, 0.0029081953689455986, 0.0036761832889169455, 0.0010579851223155856, 0.0029922928661108017, 0.0012128290254622698, 0.0073946346528828144, 0.23551659286022186, 0.0032097778748720884, 0.011999192647635937, 0.1168077290058136, 0.00079422048293054104, 0.0032939198426902294, 0.0069403522647917271, 0.0053095933981239796, 0.005681673064827919, 0.0045628133229911327, 0.0013778147986158729, 0.00420424435287714, 0.0030117908027023077, 0.0012715929187834263, 0.0017754717264324427, 0.014105434529483318, 0.0025266779121011496, 0.0023870770819485188, 0.0082657206803560257, 0.010465466417372227, 0.00035631228820420802, 0.0037707947194576263, 0.0084167392924427986, 0.00063061865512281656, 0.017737949267029762, 0.0014096172526478767, 0.0034399519208818674, 0.0026917844079434872, 0.0081208618357777596, 0.0048009739257395267, 0.00036954903043806553, 0.0067560477182269096, 0.0040555885061621666, 0.0086145354434847832, 0.005047316662967205, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3374, 47, 8167, 5358, 5568, 6170, 8240, -17, 7, -278, 1828, 429, 11211, -70133160, 2394, 15567, -56615124, -90, -383, 7644, 3297, -13, -50, 364, 3277, -776, 61, 652, 3517, 1398, 2237, 14336, 3703, 266, 191, -1440, 202, 3666, -111, 9966, 1907, 11216, -253, -68, 11523, 165, 6729, 3205, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00061443279264494777, 0.0006413955707103014, 0.00038574551581405103, 0.00034372217487543821, 0.00036024526343680918, 0.0003365134762134403, 0.00046512178960256279, 0.0018137148581445217, 0.00052566756494343281, 0.0027168008964508772, 0.00080765748862177134, 0.0020072092302143574, 0.00019778823480010033, 2.3125104053889345e-09, 0.0010831133695319295, 0.00021144657512195408, 2.3125104053889345e-09, 0.0077773625962436199, 0.00047310118679888546, 0.00050876371096819639, 0.00032930279849097133, 0.0055536846630275249, 0.00039655048749409616, 0.0016967158298939466, 0.001151231350377202, 0.0007268705521710217, 0.0026897783391177654, 0.0019342373125255108, 0.00032130174804478884, 0.0021089038345962763, 0.0013211858458817005, 0.00016463581414427608, 0.00021380773978307843, 0.01230902224779129, 0.00060452771140262485, 0.00084731384413316846, 0.0073627186939120293, 0.00034899942693300545, 0.0030659888871014118, 0.00034785806201398373, 0.0015061948215588927, 0.00019521350623108447, 0.00068052567075937986, 0.012250477448105812, 0.00043332122731953859, 0.00051399314543232322, 0.00041532184695824981, 0.0002781571529339999, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 8,-127,45,-42,24,-20,-45,20, 
  /* [1][0][][] */ 66,63,-28,-97,-1,-6,-70,127, 
  /* [2][0][][] */ 33,-3,-50,106,41,127,45,90, 
  /* [3][0][][] */ 77,67,-77,127,-106,-8,-10,13, 
  /* [4][0][][] */ -36,-96,69,9,9,21,-34,-127, 
  /* [5][0][][] */ 20,0,-40,47,6,-38,36,127, 
  /* [6][0][][] */ 45,-8,-127,-77,121,-4,33,-36, 
  /* [7][0][][] */ 127,18,24,-16,32,-2,84,-61, 
  /* [8][0][][] */ 16,-94,9,100,1,24,-6,-127, 
  /* [9][0][][] */ 97,-127,13,0,-14,7,-121,86, 
  /* [10][0][][] */ -107,-55,-97,18,2,-4,-127,57, 
  /* [11][0][][] */ -26,-48,-17,-109,-127,-35,55,-17, 
  /* [12][0][][] */ 20,-1,-34,64,-78,-31,46,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-29,-3,10,34,127,43,43, 
  /* [15][0][][] */ 40,9,23,-127,68,44,-62,66, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,25,127,22,-22,-7,26,29, 
  /* [18][0][][] */ 86,-127,24,28,-12,19,-119,3, 
  /* [19][0][][] */ -127,-34,9,44,-47,-48,-82,48, 
  /* [20][0][][] */ 26,35,-36,121,-20,-127,-9,58, 
  /* [21][0][][] */ 58,16,127,11,-10,-12,67,13, 
  /* [22][0][][] */ -77,-11,-127,6,7,12,-95,8, 
  /* [23][0][][] */ -105,115,-20,-19,7,-15,127,-73, 
  /* [24][0][][] */ 3,-59,-57,81,-13,-56,100,127, 
  /* [25][0][][] */ 15,43,33,25,127,115,-75,-48, 
  /* [26][0][][] */ -87,-31,-127,1,11,14,-98,-1, 
  /* [27][0][][] */ 7,-25,-33,5,-49,127,68,57, 
  /* [28][0][][] */ -7,-14,-20,44,24,127,49,56, 
  /* [29][0][][] */ 78,32,127,2,-17,-20,79,-8, 
  /* [30][0][][] */ -81,127,-33,-34,5,-11,111,-33, 
  /* [31][0][][] */ -45,-94,-20,4,39,-91,127,115, 
  /* [32][0][][] */ 14,-1,-39,114,-16,95,76,127, 
  /* [33][0][][] */ -3,60,-13,-115,14,-11,-13,127, 
  /* [34][0][][] */ -21,75,-11,-104,35,-14,15,127, 
  /* [35][0][][] */ 127,0,-20,-35,35,31,100,-37, 
  /* [36][0][][] */ -127,-10,15,44,-38,26,-92,66, 
  /* [37][0][][] */ -10,-17,-17,43,28,127,51,64, 
  /* [38][0][][] */ 11,17,5,79,127,-7,-24,33, 
  /* [39][0][][] */ 3,31,33,-127,18,-1,-37,124, 
  /* [40][0][][] */ 103,21,127,10,-5,-20,71,-2, 
  /* [41][0][][] */ 2,-34,-36,77,54,127,68,105, 
  /* [42][0][][] */ -90,-5,127,24,-32,12,-32,56, 
  /* [43][0][][] */ -13,-56,8,93,-15,2,11,-127, 
  /* [44][0][][] */ 42,0,-64,-127,66,-42,-8,-115, 
  /* [45][0][][] */ -103,127,-8,-56,14,4,88,-69, 
  /* [46][0][][] */ -127,-32,46,39,-23,42,-100,53, 
  /* [47][0][][] */ 89,26,98,-4,24,-14,127,-7, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010460609337314963, 0.001091964659281075, 0.00065672490745782852, 0.00058518094010651112, 0.00061331118922680616, 0.00057290826225653291, 0.00079186161747202277, 0.0030878174584358931, 0.00089493975974619389, 0.0046253055334091187, 0.0013750225771218538, 0.0034172383602708578, 0.00033673096913844347, 3.937008052901092e-09, 0.001843981328420341, 0.00035998405655846, 3.937008052901092e-09, 0.013240822590887547, 0.00080544641241431236, 0.00086616125190630555, 0.00056063220836222172, 0.0094550503417849541, 0.00067512021632865071, 0.0028886287473142147, 0.0019599511288106441, 0.0012374842772260308, 0.0045793000608682632, 0.0032930048182606697, 0.0005470105679705739, 0.0035903714597225189, 0.0022492955904453993, 0.00028028956148773432, 0.00036400390672497451, 0.020955892279744148, 0.0010291977087035775, 0.0014425368281081319, 0.012534898705780506, 0.00059416535077616572, 0.005219792015850544, 0.00059222220443189144, 0.0025642700493335724, 0.00033234755392186344, 0.001158582977950573, 0.0208562221378088, 0.00073772174073383212, 0.00087506428826600313, 0.00070707808481529355, 0.00047355762217193842, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -2442, -41252, -7469, -13455, -31423, -1035, -26415, -25336, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021445024758577347, 0.0020432535093277693, 0.0024466069880872965, 0.0011728501413017511, 0.0011366575490683317, 0.0022201670799404383, 0.001619144226424396, 0.0010917866602540016, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-25,-3,-2,126,4,-5,9,1,-119,-91,-5,0,127,-3,0, 
  /* [1][0][][] */ 0,-27,-8,84,71,12,20,6,-1,-4,127,-45,0,31,-9,0, 
  /* [2][0][][] */ 0,2,0,-13,-60,0,15,-3,1,1,-18,1,0,127,-8,0, 
  /* [3][0][][] */ 0,-5,-22,-127,81,25,66,24,-1,68,-7,37,0,1,18,0, 
  /* [4][0][][] */ 0,40,-20,35,-52,29,127,4,1,-60,19,-10,0,-7,15,0, 
  /* [5][0][][] */ 0,-18,-9,2,-20,-25,-14,10,-1,11,-5,-41,0,-5,127,0, 
  /* [6][0][][] */ 0,13,1,3,53,-17,-24,-4,-1,-114,115,72,0,127,62,0, 
  /* [7][0][][] */ 0,13,-13,127,6,-1,11,14,-1,66,-56,73,0,-11,45,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.091141358017921448, 0.086838275194168091, 0.10398079454898834, 0.049846131354570389, 0.048307944089174271, 0.094357095658779144, 0.068813629448413849, 0.046400930732488632, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 27841, 25884, 9797, 11442, 107183, 13960, 67143, -13412, 5500, 29447, 14051, -445, 24961, 10137, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 9.5336450613103807e-05, 0.000154193548951298, 0.00035010930150747299, 0.00016618000518064946, 3.0905455787433311e-05, 0.00036444340366870165, 5.7670851674629375e-05, 1.9328193957335316e-05, 0.00033173905103467405, 0.00020176127145532519, 0.00073421624256297946, 0.00072724185883998871, 0.00027472028159536421, 0.00019187825091648847, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,38,-66,80,-75,-90,-3,-8,30,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-25,92,-2,-73,69,-94,78,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,14,-44,17,-28,15,-28,0,3,-109,-49,8,-29,-14, -78,-42,-57,-14,-8,-25,8,-27,-108,-89,21,-11,-104,-127,1,23, 14,1,66,2,2,35,-25,34,-127,6,-2,1,-21,11,-4,43, 
  /* [0][2][][] */ -115,-73,70,2,-7,40,-39,53,-77,0,0,4,40,2,-27,23, 23,-5,32,-2,-28,41,-34,22,-125,-13,0,84,-58,0,-28,-111, 21,-8,20,0,4,15,9,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0040517989546060562, 0.0065532256849110126, 0.014879644848406315, 0.0070626502856612206, 0.0013134818291291595, 0.015488844364881516, 0.0024510112125426531, 0.00082144822226837277, 0.014098909683525562, 0.0085748536512255669, 0.031204190105199814, 0.030907778069376945, 0.011675611138343811, 0.0081548253074288368, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 8829, -118923, 4, 205290, 42471, 51836, 18405, 475386, 18701, 20205, 876865, -1073741824, 35874, 19496, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00032071446185000241, 0.00018103739421349019, 4.2213752749375999e-05, 1.2828133549191989e-05, 0.00021995537099428475, 8.0259429523721337e-05, 0.00037983612855896354, 5.1362094382056966e-06, 5.4190943046705797e-05, 0.00016550243890378624, 6.7406908783596009e-06, 1.1533876076441629e-09, 0.00010820728493854403, 0.00011714250285876915, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 46,-1,36, -5,-20,21, -127,-113,-60, 
  /* [1][1][][] */ 6,2,7, -20,9,1, 1,-27,9, 
  /* [1][2][][] */ 4,26,7, 2,15,5, 44,-13,17, 
  /* [2][0][][] */ 37,-2,1, 86,123,12, 48,-36,17, 
  /* [2][1][][] */ 10,12,1, 64,127,-27, 20,-7,-2, 
  /* [2][2][][] */ 56,-67,27, 83,-44,-15, 42,-52,25, 
  /* [3][0][][] */ 7,33,1, 36,97,21, 4,10,-1, 
  /* [3][1][][] */ 20,37,5, 67,127,24, -9,-13,8, 
  /* [3][2][][] */ 2,4,2, 28,28,9, 4,1,8, 
  /* [4][0][][] */ 44,86,-7, 13,90,-11, -18,14,-1, 
  /* [4][1][][] */ 46,103,44, 26,122,22, 33,60,-17, 
  /* [4][2][][] */ 61,89,32, 48,127,8, -21,27,18, 
  /* [5][0][][] */ 2,5,-119, -10,5,-101, -10,34,-24, 
  /* [5][1][][] */ -2,-39,-127, -8,-43,-116, -9,13,-26, 
  /* [5][2][][] */ -7,10,-20, 0,1,-10, -2,15,-11, 
  /* [6][0][][] */ 20,-66,29, 43,-88,36, 8,-20,8, 
  /* [6][1][][] */ 32,-98,57, 61,-127,68, 7,-28,16, 
  /* [6][2][][] */ 16,-39,9, 10,-47,22, -14,5,-3, 
  /* [7][0][][] */ -25,16,10, -102,-42,7, -23,19,7, 
  /* [7][1][][] */ -11,-10,5, -127,-99,-3, -9,-9,9, 
  /* [7][2][][] */ -12,39,1, -7,16,7, -22,27,2, 
  /* [8][0][][] */ -113,-122,-72, -116,-126,-83, -111,-126,-87, 
  /* [8][1][][] */ -117,-93,-72, -119,-100,-86, -112,-127,-91, 
  /* [8][2][][] */ -127,-103,-76, -127,-109,-90, -117,-110,-94, 
  /* [9][0][][] */ -17,-3,7, -13,-9,-1, 4,3,-8, 
  /* [9][1][][] */ 101,121,-6, 72,127,17, -15,13,25, 
  /* [9][2][][] */ -27,-24,18, 3,-30,4, 10,4,-17, 
  /* [10][0][][] */ -26,-84,-18, 33,94,20, -10,-13,-2, 
  /* [10][1][][] */ -60,-104,-14, 78,127,15, -18,-27,0, 
  /* [10][2][][] */ -33,-20,2, 35,22,-11, -10,-2,7, 
  /* [11][0][][] */ -15,-30,-3, 9,-47,3, 9,-105,-55, 
  /* [11][1][][] */ -49,-48,-22, -37,-68,-40, -16,-63,-56, 
  /* [11][2][][] */ -11,-43,-83, 117,127,63, -42,12,-50, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-18, -62,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,25, 7,16,11, 
  /* [13][2][][] */ -9,-20,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 45,-4,-39, 79,-24,-50, 33,-7,-19, 
  /* [14][1][][] */ 89,-14,-73, 127,-38,-87, 59,-17,-36, 
  /* [14][2][][] */ 53,-9,-47, 73,-20,-53, 25,-6,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.081782184541225433, 0.046164531260728836, 0.01076450664550066, 0.0032711739186197519, 0.056088615208864212, 0.0204661525785923, 0.096858203411102295, 0.001309733372181654, 0.013818689621984959, 0.04220312088727951, 0.0017188760684803128, 2.9411381774480105e-07, 0.02759285643696785, 0.029871337115764618, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.58737760782241821, } };
const TfArray<1, int> quant46_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.48346391320228577, } };
const TfArray<1, int> quant50_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.49454465508460999, } };
const TfArray<1, int> quant53_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.62218642234802246, } };
const TfArray<1, int> quant54_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.3454037606716156, } };
const TfArray<1, int> quant58_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.27812427282333374, } };
const TfArray<1, int> quant61_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.35298079252243042, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.25900387763977051, } };
const TfArray<1, int> quant65_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.42111912369728088, } };
const TfArray<1, int> quant66_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.072089940309524536, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11066637188196182, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
